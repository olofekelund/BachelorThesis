/*
* generated by Xtext
*/
package org.language.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ReqLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cRequirementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cRequirementsRequirementParserRuleCall_0 = (RuleCall)cRequirementsAssignment.eContents().get(0);
		
		//Model:
		//	requirements+=Requirement*;
		public ParserRule getRule() { return rule; }

		//requirements+=Requirement*
		public Assignment getRequirementsAssignment() { return cRequirementsAssignment; }

		//Requirement
		public RuleCall getRequirementsRequirementParserRuleCall_0() { return cRequirementsRequirementParserRuleCall_0; }
	}

	public class RequirementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Requirement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReqIDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cReqIDReqIDParserRuleCall_0_0 = (RuleCall)cReqIDAssignment_0.eContents().get(0);
		private final Assignment cPrefixAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixPrefixParserRuleCall_1_0 = (RuleCall)cPrefixAssignment_1.eContents().get(0);
		private final Assignment cMainRequirementAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cMainRequirementAlternatives_2_0 = (Alternatives)cMainRequirementAssignment_2.eContents().get(0);
		private final RuleCall cMainRequirementMainFunctionParserRuleCall_2_0_0 = (RuleCall)cMainRequirementAlternatives_2_0.eContents().get(0);
		private final RuleCall cMainRequirementMainCompositionParserRuleCall_2_0_1 = (RuleCall)cMainRequirementAlternatives_2_0.eContents().get(1);
		private final RuleCall cMainRequirementMainStateTransitionParserRuleCall_2_0_2 = (RuleCall)cMainRequirementAlternatives_2_0.eContents().get(2);
		private final RuleCall cMainRequirementMainAttributesParserRuleCall_2_0_3 = (RuleCall)cMainRequirementAlternatives_2_0.eContents().get(3);
		private final RuleCall cMainRequirementMainFunctionsParserRuleCall_2_0_4 = (RuleCall)cMainRequirementAlternatives_2_0.eContents().get(4);
		private final Keyword cFullStopKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		/////  | MainComposition
		//Requirement:
		//	reqID=ReqID prefix=Prefix? mainRequirement=(MainFunction | MainComposition | MainStateTransition | MainAttributes |
		//	MainFunctions) ".";
		public ParserRule getRule() { return rule; }

		//reqID=ReqID prefix=Prefix? mainRequirement=(MainFunction | MainComposition | MainStateTransition | MainAttributes |
		//MainFunctions) "."
		public Group getGroup() { return cGroup; }

		//reqID=ReqID
		public Assignment getReqIDAssignment_0() { return cReqIDAssignment_0; }

		//ReqID
		public RuleCall getReqIDReqIDParserRuleCall_0_0() { return cReqIDReqIDParserRuleCall_0_0; }

		//prefix=Prefix?
		public Assignment getPrefixAssignment_1() { return cPrefixAssignment_1; }

		//Prefix
		public RuleCall getPrefixPrefixParserRuleCall_1_0() { return cPrefixPrefixParserRuleCall_1_0; }

		//mainRequirement=(MainFunction | MainComposition | MainStateTransition | MainAttributes | MainFunctions)
		public Assignment getMainRequirementAssignment_2() { return cMainRequirementAssignment_2; }

		//MainFunction | MainComposition | MainStateTransition | MainAttributes | MainFunctions
		public Alternatives getMainRequirementAlternatives_2_0() { return cMainRequirementAlternatives_2_0; }

		//MainFunction
		public RuleCall getMainRequirementMainFunctionParserRuleCall_2_0_0() { return cMainRequirementMainFunctionParserRuleCall_2_0_0; }

		//MainComposition
		public RuleCall getMainRequirementMainCompositionParserRuleCall_2_0_1() { return cMainRequirementMainCompositionParserRuleCall_2_0_1; }

		//MainStateTransition
		public RuleCall getMainRequirementMainStateTransitionParserRuleCall_2_0_2() { return cMainRequirementMainStateTransitionParserRuleCall_2_0_2; }

		//MainAttributes
		public RuleCall getMainRequirementMainAttributesParserRuleCall_2_0_3() { return cMainRequirementMainAttributesParserRuleCall_2_0_3; }

		//MainFunctions
		public RuleCall getMainRequirementMainFunctionsParserRuleCall_2_0_4() { return cMainRequirementMainFunctionsParserRuleCall_2_0_4; }

		//"."
		public Keyword getFullStopKeyword_3() { return cFullStopKeyword_3; }
	}

	public class ReqIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReqID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cReqIDAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cReqIDIDKeyword_0_0 = (Keyword)cReqIDAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameSTRINGTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ReqID:
		//	reqID="ID:" name=STRING;
		public ParserRule getRule() { return rule; }

		//reqID="ID:" name=STRING
		public Group getGroup() { return cGroup; }

		//reqID="ID:"
		public Assignment getReqIDAssignment_0() { return cReqIDAssignment_0; }

		//"ID:"
		public Keyword getReqIDIDKeyword_0_0() { return cReqIDIDKeyword_0_0; }

		//name=STRING
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//STRING
		public RuleCall getNameSTRINGTerminalRuleCall_1_0() { return cNameSTRINGTerminalRuleCall_1_0; }
	}

	public class PrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLeftOperandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cLeftOperandAlternatives_0_0 = (Alternatives)cLeftOperandAssignment_0.eContents().get(0);
		private final RuleCall cLeftOperandPrefixConditionParserRuleCall_0_0_0 = (RuleCall)cLeftOperandAlternatives_0_0.eContents().get(0);
		private final RuleCall cLeftOperandPrefixStateParserRuleCall_0_0_1 = (RuleCall)cLeftOperandAlternatives_0_0.eContents().get(1);
		private final RuleCall cLeftOperandPrefixEventParserRuleCall_0_0_2 = (RuleCall)cLeftOperandAlternatives_0_0.eContents().get(2);
		private final Assignment cPrefixListAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPrefixListPrefixRightOperandParserRuleCall_1_0 = (RuleCall)cPrefixListAssignment_1.eContents().get(0);
		
		//// Prefixes
		//Prefix:
		//	leftOperand=(PrefixCondition | PrefixState | PrefixEvent) prefixList+=PrefixRightOperand*;
		public ParserRule getRule() { return rule; }

		//leftOperand=(PrefixCondition | PrefixState | PrefixEvent) prefixList+=PrefixRightOperand*
		public Group getGroup() { return cGroup; }

		//leftOperand=(PrefixCondition | PrefixState | PrefixEvent)
		public Assignment getLeftOperandAssignment_0() { return cLeftOperandAssignment_0; }

		//PrefixCondition | PrefixState | PrefixEvent
		public Alternatives getLeftOperandAlternatives_0_0() { return cLeftOperandAlternatives_0_0; }

		//PrefixCondition
		public RuleCall getLeftOperandPrefixConditionParserRuleCall_0_0_0() { return cLeftOperandPrefixConditionParserRuleCall_0_0_0; }

		//PrefixState
		public RuleCall getLeftOperandPrefixStateParserRuleCall_0_0_1() { return cLeftOperandPrefixStateParserRuleCall_0_0_1; }

		//PrefixEvent
		public RuleCall getLeftOperandPrefixEventParserRuleCall_0_0_2() { return cLeftOperandPrefixEventParserRuleCall_0_0_2; }

		//prefixList+=PrefixRightOperand*
		public Assignment getPrefixListAssignment_1() { return cPrefixListAssignment_1; }

		//PrefixRightOperand
		public RuleCall getPrefixListPrefixRightOperandParserRuleCall_1_0() { return cPrefixListPrefixRightOperandParserRuleCall_1_0; }
	}

	public class PrefixRightOperandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixRightOperand");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOperatorAlternatives_0_0 = (Alternatives)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cOperatorAndKeyword_0_0_0 = (Keyword)cOperatorAlternatives_0_0.eContents().get(0);
		private final Keyword cOperatorOrKeyword_0_0_1 = (Keyword)cOperatorAlternatives_0_0.eContents().get(1);
		private final Assignment cPrefixRightOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cPrefixRightOperandAlternatives_1_0 = (Alternatives)cPrefixRightOperandAssignment_1.eContents().get(0);
		private final RuleCall cPrefixRightOperandPrefixConditionParserRuleCall_1_0_0 = (RuleCall)cPrefixRightOperandAlternatives_1_0.eContents().get(0);
		private final RuleCall cPrefixRightOperandPrefixStateParserRuleCall_1_0_1 = (RuleCall)cPrefixRightOperandAlternatives_1_0.eContents().get(1);
		private final RuleCall cPrefixRightOperandPrefixEventParserRuleCall_1_0_2 = (RuleCall)cPrefixRightOperandAlternatives_1_0.eContents().get(2);
		
		//PrefixRightOperand:
		//	operator=("and" | "or") prefixRightOperand=(PrefixCondition | PrefixState | PrefixEvent);
		public ParserRule getRule() { return rule; }

		//operator=("and" | "or") prefixRightOperand=(PrefixCondition | PrefixState | PrefixEvent)
		public Group getGroup() { return cGroup; }

		//operator=("and" | "or")
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }

		//"and" | "or"
		public Alternatives getOperatorAlternatives_0_0() { return cOperatorAlternatives_0_0; }

		//"and"
		public Keyword getOperatorAndKeyword_0_0_0() { return cOperatorAndKeyword_0_0_0; }

		//"or"
		public Keyword getOperatorOrKeyword_0_0_1() { return cOperatorOrKeyword_0_0_1; }

		//prefixRightOperand=(PrefixCondition | PrefixState | PrefixEvent)
		public Assignment getPrefixRightOperandAssignment_1() { return cPrefixRightOperandAssignment_1; }

		//PrefixCondition | PrefixState | PrefixEvent
		public Alternatives getPrefixRightOperandAlternatives_1_0() { return cPrefixRightOperandAlternatives_1_0; }

		//PrefixCondition
		public RuleCall getPrefixRightOperandPrefixConditionParserRuleCall_1_0_0() { return cPrefixRightOperandPrefixConditionParserRuleCall_1_0_0; }

		//PrefixState
		public RuleCall getPrefixRightOperandPrefixStateParserRuleCall_1_0_1() { return cPrefixRightOperandPrefixStateParserRuleCall_1_0_1; }

		//PrefixEvent
		public RuleCall getPrefixRightOperandPrefixEventParserRuleCall_1_0_2() { return cPrefixRightOperandPrefixEventParserRuleCall_1_0_2; }
	}

	public class PrefixStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixFixedSyntaxAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrefixFixedSyntaxPrefixFixedSyntaxParserRuleCall_0_0 = (RuleCall)cPrefixFixedSyntaxAssignment_0.eContents().get(0);
		private final Assignment cStateExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cStateExpressionAlternatives_1_0 = (Alternatives)cStateExpressionAssignment_1.eContents().get(0);
		private final RuleCall cStateExpressionStateParserRuleCall_1_0_0 = (RuleCall)cStateExpressionAlternatives_1_0.eContents().get(0);
		private final RuleCall cStateExpressionParameterStateParserRuleCall_1_0_1 = (RuleCall)cStateExpressionAlternatives_1_0.eContents().get(1);
		
		//PrefixState:
		//	prefixFixedSyntax=PrefixFixedSyntax stateExpression=(State | ParameterState);
		public ParserRule getRule() { return rule; }

		//prefixFixedSyntax=PrefixFixedSyntax stateExpression=(State | ParameterState)
		public Group getGroup() { return cGroup; }

		//prefixFixedSyntax=PrefixFixedSyntax
		public Assignment getPrefixFixedSyntaxAssignment_0() { return cPrefixFixedSyntaxAssignment_0; }

		//PrefixFixedSyntax
		public RuleCall getPrefixFixedSyntaxPrefixFixedSyntaxParserRuleCall_0_0() { return cPrefixFixedSyntaxPrefixFixedSyntaxParserRuleCall_0_0; }

		//stateExpression=(State | ParameterState)
		public Assignment getStateExpressionAssignment_1() { return cStateExpressionAssignment_1; }

		//State | ParameterState
		public Alternatives getStateExpressionAlternatives_1_0() { return cStateExpressionAlternatives_1_0; }

		//State
		public RuleCall getStateExpressionStateParserRuleCall_1_0_0() { return cStateExpressionStateParserRuleCall_1_0_0; }

		//ParameterState
		public RuleCall getStateExpressionParameterStateParserRuleCall_1_0_1() { return cStateExpressionParameterStateParserRuleCall_1_0_1; }
	}

	public class PrefixConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixFixedSyntaxAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrefixFixedSyntaxPrefixFixedSyntaxParserRuleCall_0_0 = (RuleCall)cPrefixFixedSyntaxAssignment_0.eContents().get(0);
		private final Assignment cParameterAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cParameterAlternatives_1_0 = (Alternatives)cParameterAssignment_1.eContents().get(0);
		private final RuleCall cParameterTimeParserRuleCall_1_0_0 = (RuleCall)cParameterAlternatives_1_0.eContents().get(0);
		private final RuleCall cParameterParameterParserRuleCall_1_0_1 = (RuleCall)cParameterAlternatives_1_0.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Keyword cIsKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cHasKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		private final Assignment cOperatorAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cOperatorOperatorParserRuleCall_3_0 = (RuleCall)cOperatorAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cValueAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cValueValueParserRuleCall_4_0_0 = (RuleCall)cValueAssignment_4_0.eContents().get(0);
		private final Assignment cTimeAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cTimeTimingConstraintParserRuleCall_4_1_0 = (RuleCall)cTimeAssignment_4_1.eContents().get(0);
		
		//PrefixCondition:
		//	prefixFixedSyntax=PrefixFixedSyntax parameter=(Time | Parameter) ("is" | "has") operator=Operator? (value=Value |
		//	time=TimingConstraint)?;
		public ParserRule getRule() { return rule; }

		//prefixFixedSyntax=PrefixFixedSyntax parameter=(Time | Parameter) ("is" | "has") operator=Operator? (value=Value |
		//time=TimingConstraint)?
		public Group getGroup() { return cGroup; }

		//prefixFixedSyntax=PrefixFixedSyntax
		public Assignment getPrefixFixedSyntaxAssignment_0() { return cPrefixFixedSyntaxAssignment_0; }

		//PrefixFixedSyntax
		public RuleCall getPrefixFixedSyntaxPrefixFixedSyntaxParserRuleCall_0_0() { return cPrefixFixedSyntaxPrefixFixedSyntaxParserRuleCall_0_0; }

		//parameter=(Time | Parameter)
		public Assignment getParameterAssignment_1() { return cParameterAssignment_1; }

		//Time | Parameter
		public Alternatives getParameterAlternatives_1_0() { return cParameterAlternatives_1_0; }

		//Time
		public RuleCall getParameterTimeParserRuleCall_1_0_0() { return cParameterTimeParserRuleCall_1_0_0; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_1_0_1() { return cParameterParameterParserRuleCall_1_0_1; }

		//"is" | "has"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"is"
		public Keyword getIsKeyword_2_0() { return cIsKeyword_2_0; }

		//"has"
		public Keyword getHasKeyword_2_1() { return cHasKeyword_2_1; }

		//operator=Operator?
		public Assignment getOperatorAssignment_3() { return cOperatorAssignment_3; }

		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_3_0() { return cOperatorOperatorParserRuleCall_3_0; }

		//(value=Value | time=TimingConstraint)?
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//value=Value
		public Assignment getValueAssignment_4_0() { return cValueAssignment_4_0; }

		//Value
		public RuleCall getValueValueParserRuleCall_4_0_0() { return cValueValueParserRuleCall_4_0_0; }

		//time=TimingConstraint
		public Assignment getTimeAssignment_4_1() { return cTimeAssignment_4_1; }

		//TimingConstraint
		public RuleCall getTimeTimingConstraintParserRuleCall_4_1_0() { return cTimeTimingConstraintParserRuleCall_4_1_0; }
	}

	public class PrefixEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPrefixFixedSyntaxAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPrefixFixedSyntaxPrefixFixedSyntaxParserRuleCall_0_0 = (RuleCall)cPrefixFixedSyntaxAssignment_0.eContents().get(0);
		private final Assignment cEvent_expressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cEvent_expressionAlternatives_1_0 = (Alternatives)cEvent_expressionAssignment_1.eContents().get(0);
		private final RuleCall cEvent_expressionParamEventParserRuleCall_1_0_0 = (RuleCall)cEvent_expressionAlternatives_1_0.eContents().get(0);
		private final RuleCall cEvent_expressionActorEventParserRuleCall_1_0_1 = (RuleCall)cEvent_expressionAlternatives_1_0.eContents().get(1);
		private final RuleCall cEvent_expressionStateEventParserRuleCall_1_0_2 = (RuleCall)cEvent_expressionAlternatives_1_0.eContents().get(2);
		
		//PrefixEvent:
		//	prefixFixedSyntax=PrefixFixedSyntax event_expression=(ParamEvent | ActorEvent | StateEvent);
		public ParserRule getRule() { return rule; }

		//prefixFixedSyntax=PrefixFixedSyntax event_expression=(ParamEvent | ActorEvent | StateEvent)
		public Group getGroup() { return cGroup; }

		//prefixFixedSyntax=PrefixFixedSyntax
		public Assignment getPrefixFixedSyntaxAssignment_0() { return cPrefixFixedSyntaxAssignment_0; }

		//PrefixFixedSyntax
		public RuleCall getPrefixFixedSyntaxPrefixFixedSyntaxParserRuleCall_0_0() { return cPrefixFixedSyntaxPrefixFixedSyntaxParserRuleCall_0_0; }

		//event_expression=(ParamEvent | ActorEvent | StateEvent)
		public Assignment getEvent_expressionAssignment_1() { return cEvent_expressionAssignment_1; }

		//ParamEvent | ActorEvent | StateEvent
		public Alternatives getEvent_expressionAlternatives_1_0() { return cEvent_expressionAlternatives_1_0; }

		//ParamEvent
		public RuleCall getEvent_expressionParamEventParserRuleCall_1_0_0() { return cEvent_expressionParamEventParserRuleCall_1_0_0; }

		//ActorEvent
		public RuleCall getEvent_expressionActorEventParserRuleCall_1_0_1() { return cEvent_expressionActorEventParserRuleCall_1_0_1; }

		//StateEvent
		public RuleCall getEvent_expressionStateEventParserRuleCall_1_0_2() { return cEvent_expressionStateEventParserRuleCall_1_0_2; }
	}

	public class PrefixFixedSyntaxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrefixFixedSyntax");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIfKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cAsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cSoonKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cAsKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		private final Keyword cWhileKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cIfKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cAsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cSoonKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Keyword cAsKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		
		//PrefixFixedSyntax:
		//	"While" | "If" | "As" "soon" "as" | "while" | "if" | "as" "soon" "as";
		public ParserRule getRule() { return rule; }

		//"While" | "If" | "As" "soon" "as" | "while" | "if" | "as" "soon" "as"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"While"
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }

		//"If"
		public Keyword getIfKeyword_1() { return cIfKeyword_1; }

		//"As" "soon" "as"
		public Group getGroup_2() { return cGroup_2; }

		//"As"
		public Keyword getAsKeyword_2_0() { return cAsKeyword_2_0; }

		//"soon"
		public Keyword getSoonKeyword_2_1() { return cSoonKeyword_2_1; }

		//"as"
		public Keyword getAsKeyword_2_2() { return cAsKeyword_2_2; }

		//"while"
		public Keyword getWhileKeyword_3() { return cWhileKeyword_3; }

		//"if"
		public Keyword getIfKeyword_4() { return cIfKeyword_4; }

		//"as" "soon" "as"
		public Group getGroup_5() { return cGroup_5; }

		//"as"
		public Keyword getAsKeyword_5_0() { return cAsKeyword_5_0; }

		//"soon"
		public Keyword getSoonKeyword_5_1() { return cSoonKeyword_5_1; }

		//"as"
		public Keyword getAsKeyword_5_2() { return cAsKeyword_5_2; }
	}

	public class ParamEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParamEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cParameterAlternatives_0_0 = (Alternatives)cParameterAssignment_0.eContents().get(0);
		private final RuleCall cParameterTimeParserRuleCall_0_0_0 = (RuleCall)cParameterAlternatives_0_0.eContents().get(0);
		private final RuleCall cParameterParameterParserRuleCall_0_0_1 = (RuleCall)cParameterAlternatives_0_0.eContents().get(1);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cActionAlternatives_1_0 = (Alternatives)cActionAssignment_1.eContents().get(0);
		private final Keyword cActionIncreasesAboveKeyword_1_0_0 = (Keyword)cActionAlternatives_1_0.eContents().get(0);
		private final Keyword cActionDecreasesBelowKeyword_1_0_1 = (Keyword)cActionAlternatives_1_0.eContents().get(1);
		private final Keyword cActionReachesKeyword_1_0_2 = (Keyword)cActionAlternatives_1_0.eContents().get(2);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//// Events
		//ParamEvent:
		//	parameter=(Time | Parameter) action=("increases above" | "decreases below" | "reaches") value=Value;
		public ParserRule getRule() { return rule; }

		//parameter=(Time | Parameter) action=("increases above" | "decreases below" | "reaches") value=Value
		public Group getGroup() { return cGroup; }

		//parameter=(Time | Parameter)
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//Time | Parameter
		public Alternatives getParameterAlternatives_0_0() { return cParameterAlternatives_0_0; }

		//Time
		public RuleCall getParameterTimeParserRuleCall_0_0_0() { return cParameterTimeParserRuleCall_0_0_0; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_0_0_1() { return cParameterParameterParserRuleCall_0_0_1; }

		//action=("increases above" | "decreases below" | "reaches")
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }

		//"increases above" | "decreases below" | "reaches"
		public Alternatives getActionAlternatives_1_0() { return cActionAlternatives_1_0; }

		//"increases above"
		public Keyword getActionIncreasesAboveKeyword_1_0_0() { return cActionIncreasesAboveKeyword_1_0_0; }

		//"decreases below"
		public Keyword getActionDecreasesBelowKeyword_1_0_1() { return cActionDecreasesBelowKeyword_1_0_1; }

		//"reaches"
		public Keyword getActionReachesKeyword_1_0_2() { return cActionReachesKeyword_1_0_2; }

		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}

	public class ActorEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActorEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cActorAlternatives_0_0 = (Alternatives)cActorAssignment_0.eContents().get(0);
		private final RuleCall cActorSystemParserRuleCall_0_0_0 = (RuleCall)cActorAlternatives_0_0.eContents().get(0);
		private final RuleCall cActorUserParserRuleCall_0_0_1 = (RuleCall)cActorAlternatives_0_0.eContents().get(1);
		private final Assignment cActionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cActionAlternatives_1_0 = (Alternatives)cActionAssignment_1.eContents().get(0);
		private final Keyword cActionActivatesKeyword_1_0_0 = (Keyword)cActionAlternatives_1_0.eContents().get(0);
		private final Keyword cActionDeactivatesKeyword_1_0_1 = (Keyword)cActionAlternatives_1_0.eContents().get(1);
		private final Assignment cEntityAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cEntityParameterParserRuleCall_2_0 = (RuleCall)cEntityAssignment_2.eContents().get(0);
		
		//ActorEvent:
		//	actor=(System | User) action=("activates" | "deactivates") entity=Parameter;
		public ParserRule getRule() { return rule; }

		//actor=(System | User) action=("activates" | "deactivates") entity=Parameter
		public Group getGroup() { return cGroup; }

		//actor=(System | User)
		public Assignment getActorAssignment_0() { return cActorAssignment_0; }

		//System | User
		public Alternatives getActorAlternatives_0_0() { return cActorAlternatives_0_0; }

		//System
		public RuleCall getActorSystemParserRuleCall_0_0_0() { return cActorSystemParserRuleCall_0_0_0; }

		//User
		public RuleCall getActorUserParserRuleCall_0_0_1() { return cActorUserParserRuleCall_0_0_1; }

		//action=("activates" | "deactivates")
		public Assignment getActionAssignment_1() { return cActionAssignment_1; }

		//"activates" | "deactivates"
		public Alternatives getActionAlternatives_1_0() { return cActionAlternatives_1_0; }

		//"activates"
		public Keyword getActionActivatesKeyword_1_0_0() { return cActionActivatesKeyword_1_0_0; }

		//"deactivates"
		public Keyword getActionDeactivatesKeyword_1_0_1() { return cActionDeactivatesKeyword_1_0_1; }

		//entity=Parameter
		public Assignment getEntityAssignment_2() { return cEntityAssignment_2; }

		//Parameter
		public RuleCall getEntityParameterParserRuleCall_2_0() { return cEntityParameterParserRuleCall_2_0; }
	}

	public class StateEventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateEvent");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSystemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cSystemSystemParserRuleCall_0_0 = (RuleCall)cSystemAssignment_0.eContents().get(0);
		private final Keyword cStartsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cInKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStateStateParserRuleCall_3_0 = (RuleCall)cStateAssignment_3.eContents().get(0);
		
		//StateEvent:
		//	system=System "starts" "in"? state=State;
		public ParserRule getRule() { return rule; }

		//system=System "starts" "in"? state=State
		public Group getGroup() { return cGroup; }

		//system=System
		public Assignment getSystemAssignment_0() { return cSystemAssignment_0; }

		//System
		public RuleCall getSystemSystemParserRuleCall_0_0() { return cSystemSystemParserRuleCall_0_0; }

		//"starts"
		public Keyword getStartsKeyword_1() { return cStartsKeyword_1; }

		//"in"?
		public Keyword getInKeyword_2() { return cInKeyword_2; }

		//state=State
		public Assignment getStateAssignment_3() { return cStateAssignment_3; }

		//State
		public RuleCall getStateStateParserRuleCall_3_0() { return cStateStateParserRuleCall_3_0; }
	}

	public class ParameterStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterState");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cParameterParameterParserRuleCall_0_0 = (RuleCall)cParameterAssignment_0.eContents().get(0);
		private final Keyword cIsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameter_valueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cParameter_valueAlternatives_2_0 = (Alternatives)cParameter_valueAssignment_2.eContents().get(0);
		private final RuleCall cParameter_valueValueParserRuleCall_2_0_0 = (RuleCall)cParameter_valueAlternatives_2_0.eContents().get(0);
		private final RuleCall cParameter_valueStateParserRuleCall_2_0_1 = (RuleCall)cParameter_valueAlternatives_2_0.eContents().get(1);
		
		//ParameterState:
		//	parameter=Parameter "is"? parameter_value=(Value | State)?;
		public ParserRule getRule() { return rule; }

		//parameter=Parameter "is"? parameter_value=(Value | State)?
		public Group getGroup() { return cGroup; }

		//parameter=Parameter
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_0_0() { return cParameterParameterParserRuleCall_0_0; }

		//"is"?
		public Keyword getIsKeyword_1() { return cIsKeyword_1; }

		//parameter_value=(Value | State)?
		public Assignment getParameter_valueAssignment_2() { return cParameter_valueAssignment_2; }

		//Value | State
		public Alternatives getParameter_valueAlternatives_2_0() { return cParameter_valueAlternatives_2_0; }

		//Value
		public RuleCall getParameter_valueValueParserRuleCall_2_0_0() { return cParameter_valueValueParserRuleCall_2_0_0; }

		//State
		public RuleCall getParameter_valueStateParserRuleCall_2_0_1() { return cParameter_valueStateParserRuleCall_2_0_1; }
	}

	public class MainFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MainFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cTheKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cSystemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cSystemAlternatives_1_0 = (Alternatives)cSystemAssignment_1.eContents().get(0);
		private final RuleCall cSystemSystemParserRuleCall_1_0_0 = (RuleCall)cSystemAlternatives_1_0.eContents().get(0);
		private final RuleCall cSystemActorParserRuleCall_1_0_1 = (RuleCall)cSystemAlternatives_1_0.eContents().get(1);
		private final Keyword cShallKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNotKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cBeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cAbleKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cToKeyword_4_2 = (Keyword)cGroup_4.eContents().get(2);
		private final Assignment cFunctionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFunctionActionParserRuleCall_5_0 = (RuleCall)cFunctionAssignment_5.eContents().get(0);
		
		//// Mains
		//MainFunction:
		//	("The" | "the") system=(System | Actor) "shall" "not"? ("be" "able" "to")? function=Action;
		public ParserRule getRule() { return rule; }

		//("The" | "the") system=(System | Actor) "shall" "not"? ("be" "able" "to")? function=Action
		public Group getGroup() { return cGroup; }

		//"The" | "the"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"The"
		public Keyword getTheKeyword_0_0() { return cTheKeyword_0_0; }

		//"the"
		public Keyword getTheKeyword_0_1() { return cTheKeyword_0_1; }

		//system=(System | Actor)
		public Assignment getSystemAssignment_1() { return cSystemAssignment_1; }

		//System | Actor
		public Alternatives getSystemAlternatives_1_0() { return cSystemAlternatives_1_0; }

		//System
		public RuleCall getSystemSystemParserRuleCall_1_0_0() { return cSystemSystemParserRuleCall_1_0_0; }

		//Actor
		public RuleCall getSystemActorParserRuleCall_1_0_1() { return cSystemActorParserRuleCall_1_0_1; }

		//"shall"
		public Keyword getShallKeyword_2() { return cShallKeyword_2; }

		//"not"?
		public Keyword getNotKeyword_3() { return cNotKeyword_3; }

		//("be" "able" "to")?
		public Group getGroup_4() { return cGroup_4; }

		//"be"
		public Keyword getBeKeyword_4_0() { return cBeKeyword_4_0; }

		//"able"
		public Keyword getAbleKeyword_4_1() { return cAbleKeyword_4_1; }

		//"to"
		public Keyword getToKeyword_4_2() { return cToKeyword_4_2; }

		//function=Action
		public Assignment getFunctionAssignment_5() { return cFunctionAssignment_5; }

		//Action
		public RuleCall getFunctionActionParserRuleCall_5_0() { return cFunctionActionParserRuleCall_5_0; }
	}

	public class MainCompositionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MainComposition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cTheKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cSystemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSystemSystemParserRuleCall_1_0 = (RuleCall)cSystemAssignment_1.eContents().get(0);
		private final Keyword cShallKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cConsistKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cOfKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cTheKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cSubsystemsKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cSubsystemListAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cSubsystemListSystemParserRuleCall_7_0 = (RuleCall)cSubsystemListAssignment_7.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cCommaKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cSubsystemListAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cSubsystemListSystemParserRuleCall_8_1_0 = (RuleCall)cSubsystemListAssignment_8_1.eContents().get(0);
		
		//MainComposition:
		//	("The" | "the") system=System "shall" "consist" "of" "the" "subsystems" subsystemList+=System (","
		//	subsystemList+=System)*;
		public ParserRule getRule() { return rule; }

		//("The" | "the") system=System "shall" "consist" "of" "the" "subsystems" subsystemList+=System (","
		//subsystemList+=System)*
		public Group getGroup() { return cGroup; }

		//"The" | "the"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"The"
		public Keyword getTheKeyword_0_0() { return cTheKeyword_0_0; }

		//"the"
		public Keyword getTheKeyword_0_1() { return cTheKeyword_0_1; }

		//system=System
		public Assignment getSystemAssignment_1() { return cSystemAssignment_1; }

		//System
		public RuleCall getSystemSystemParserRuleCall_1_0() { return cSystemSystemParserRuleCall_1_0; }

		//"shall"
		public Keyword getShallKeyword_2() { return cShallKeyword_2; }

		//"consist"
		public Keyword getConsistKeyword_3() { return cConsistKeyword_3; }

		//"of"
		public Keyword getOfKeyword_4() { return cOfKeyword_4; }

		//"the"
		public Keyword getTheKeyword_5() { return cTheKeyword_5; }

		//"subsystems"
		public Keyword getSubsystemsKeyword_6() { return cSubsystemsKeyword_6; }

		//subsystemList+=System
		public Assignment getSubsystemListAssignment_7() { return cSubsystemListAssignment_7; }

		//System
		public RuleCall getSubsystemListSystemParserRuleCall_7_0() { return cSubsystemListSystemParserRuleCall_7_0; }

		//("," subsystemList+=System)*
		public Group getGroup_8() { return cGroup_8; }

		//","
		public Keyword getCommaKeyword_8_0() { return cCommaKeyword_8_0; }

		//subsystemList+=System
		public Assignment getSubsystemListAssignment_8_1() { return cSubsystemListAssignment_8_1; }

		//System
		public RuleCall getSubsystemListSystemParserRuleCall_8_1_0() { return cSubsystemListSystemParserRuleCall_8_1_0; }
	}

	public class MainStateTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MainStateTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cTheKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cSystemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSystemSystemParserRuleCall_1_0 = (RuleCall)cSystemAssignment_1.eContents().get(0);
		private final Keyword cShallKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTransitionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTransitionAlternatives_3_0 = (Alternatives)cTransitionAssignment_3.eContents().get(0);
		private final RuleCall cTransitionTransitionParserRuleCall_3_0_0 = (RuleCall)cTransitionAlternatives_3_0.eContents().get(0);
		private final RuleCall cTransitionOutTransitionParserRuleCall_3_0_1 = (RuleCall)cTransitionAlternatives_3_0.eContents().get(1);
		private final RuleCall cTransitionNoTransitionParserRuleCall_3_0_2 = (RuleCall)cTransitionAlternatives_3_0.eContents().get(2);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cAndKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cFunctionAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cFunctionActionParserRuleCall_4_1_0 = (RuleCall)cFunctionAssignment_4_1.eContents().get(0);
		
		//MainStateTransition:
		//	("The" | "the") system=System "shall" transition=(Transition | OutTransition | NoTransition) ("and"
		//	function=Action)?;
		public ParserRule getRule() { return rule; }

		//("The" | "the") system=System "shall" transition=(Transition | OutTransition | NoTransition) ("and" function=Action)?
		public Group getGroup() { return cGroup; }

		//"The" | "the"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"The"
		public Keyword getTheKeyword_0_0() { return cTheKeyword_0_0; }

		//"the"
		public Keyword getTheKeyword_0_1() { return cTheKeyword_0_1; }

		//system=System
		public Assignment getSystemAssignment_1() { return cSystemAssignment_1; }

		//System
		public RuleCall getSystemSystemParserRuleCall_1_0() { return cSystemSystemParserRuleCall_1_0; }

		//"shall"
		public Keyword getShallKeyword_2() { return cShallKeyword_2; }

		//transition=(Transition | OutTransition | NoTransition)
		public Assignment getTransitionAssignment_3() { return cTransitionAssignment_3; }

		//Transition | OutTransition | NoTransition
		public Alternatives getTransitionAlternatives_3_0() { return cTransitionAlternatives_3_0; }

		//Transition
		public RuleCall getTransitionTransitionParserRuleCall_3_0_0() { return cTransitionTransitionParserRuleCall_3_0_0; }

		//OutTransition
		public RuleCall getTransitionOutTransitionParserRuleCall_3_0_1() { return cTransitionOutTransitionParserRuleCall_3_0_1; }

		//NoTransition
		public RuleCall getTransitionNoTransitionParserRuleCall_3_0_2() { return cTransitionNoTransitionParserRuleCall_3_0_2; }

		//("and" function=Action)?
		public Group getGroup_4() { return cGroup_4; }

		//"and"
		public Keyword getAndKeyword_4_0() { return cAndKeyword_4_0; }

		//function=Action
		public Assignment getFunctionAssignment_4_1() { return cFunctionAssignment_4_1; }

		//Action
		public RuleCall getFunctionActionParserRuleCall_4_1_0() { return cFunctionActionParserRuleCall_4_1_0; }
	}

	public class MainAttributesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MainAttributes");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cTheKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cSystemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSystemSystemParserRuleCall_1_0 = (RuleCall)cSystemAssignment_1.eContents().get(0);
		private final Keyword cShallKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cHaveKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cTheKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cAttributesKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAttributeListAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAttributeListAttributeParserRuleCall_6_0 = (RuleCall)cAttributeListAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cAttributeListAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cAttributeListAttributeParserRuleCall_7_1_0 = (RuleCall)cAttributeListAssignment_7_1.eContents().get(0);
		
		//MainAttributes:
		//	("The" | "the") system=System "shall" "have" "the" "attributes" attributeList+=Attribute (","
		//	attributeList+=Attribute)*;
		public ParserRule getRule() { return rule; }

		//("The" | "the") system=System "shall" "have" "the" "attributes" attributeList+=Attribute ("," attributeList+=Attribute)*
		public Group getGroup() { return cGroup; }

		//"The" | "the"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"The"
		public Keyword getTheKeyword_0_0() { return cTheKeyword_0_0; }

		//"the"
		public Keyword getTheKeyword_0_1() { return cTheKeyword_0_1; }

		//system=System
		public Assignment getSystemAssignment_1() { return cSystemAssignment_1; }

		//System
		public RuleCall getSystemSystemParserRuleCall_1_0() { return cSystemSystemParserRuleCall_1_0; }

		//"shall"
		public Keyword getShallKeyword_2() { return cShallKeyword_2; }

		//"have"
		public Keyword getHaveKeyword_3() { return cHaveKeyword_3; }

		//"the"
		public Keyword getTheKeyword_4() { return cTheKeyword_4; }

		//"attributes"
		public Keyword getAttributesKeyword_5() { return cAttributesKeyword_5; }

		//attributeList+=Attribute
		public Assignment getAttributeListAssignment_6() { return cAttributeListAssignment_6; }

		//Attribute
		public RuleCall getAttributeListAttributeParserRuleCall_6_0() { return cAttributeListAttributeParserRuleCall_6_0; }

		//("," attributeList+=Attribute)*
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//attributeList+=Attribute
		public Assignment getAttributeListAssignment_7_1() { return cAttributeListAssignment_7_1; }

		//Attribute
		public RuleCall getAttributeListAttributeParserRuleCall_7_1_0() { return cAttributeListAttributeParserRuleCall_7_1_0; }
	}

	public class MainFunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MainFunctions");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTheKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cTheKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cSystemAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSystemSystemParserRuleCall_1_0 = (RuleCall)cSystemAssignment_1.eContents().get(0);
		private final Keyword cShallKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cHaveKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cTheKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cFunctionsKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cFunctionListAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cFunctionListFunctionParserRuleCall_6_0 = (RuleCall)cFunctionListAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cCommaKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cFunctionListAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cFunctionListFunctionParserRuleCall_7_1_0 = (RuleCall)cFunctionListAssignment_7_1.eContents().get(0);
		
		//MainFunctions:
		//	("The" | "the") system=System "shall" "have" "the" "functions" functionList+=Function ("," functionList+=Function)*;
		public ParserRule getRule() { return rule; }

		//("The" | "the") system=System "shall" "have" "the" "functions" functionList+=Function ("," functionList+=Function)*
		public Group getGroup() { return cGroup; }

		//"The" | "the"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"The"
		public Keyword getTheKeyword_0_0() { return cTheKeyword_0_0; }

		//"the"
		public Keyword getTheKeyword_0_1() { return cTheKeyword_0_1; }

		//system=System
		public Assignment getSystemAssignment_1() { return cSystemAssignment_1; }

		//System
		public RuleCall getSystemSystemParserRuleCall_1_0() { return cSystemSystemParserRuleCall_1_0; }

		//"shall"
		public Keyword getShallKeyword_2() { return cShallKeyword_2; }

		//"have"
		public Keyword getHaveKeyword_3() { return cHaveKeyword_3; }

		//"the"
		public Keyword getTheKeyword_4() { return cTheKeyword_4; }

		//"functions"
		public Keyword getFunctionsKeyword_5() { return cFunctionsKeyword_5; }

		//functionList+=Function
		public Assignment getFunctionListAssignment_6() { return cFunctionListAssignment_6; }

		//Function
		public RuleCall getFunctionListFunctionParserRuleCall_6_0() { return cFunctionListFunctionParserRuleCall_6_0; }

		//("," functionList+=Function)*
		public Group getGroup_7() { return cGroup_7; }

		//","
		public Keyword getCommaKeyword_7_0() { return cCommaKeyword_7_0; }

		//functionList+=Function
		public Assignment getFunctionListAssignment_7_1() { return cFunctionListAssignment_7_1; }

		//Function
		public RuleCall getFunctionListFunctionParserRuleCall_7_1_0() { return cFunctionListFunctionParserRuleCall_7_1_0; }
	}

	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Assignment cOperatorAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cOperatorAlternatives_0 = (Alternatives)cOperatorAssignment.eContents().get(0);
		private final Keyword cOperatorLess_thanKeyword_0_0 = (Keyword)cOperatorAlternatives_0.eContents().get(0);
		private final Keyword cOperatorEqual_toKeyword_0_1 = (Keyword)cOperatorAlternatives_0.eContents().get(1);
		private final Keyword cOperatorGreater_thanKeyword_0_2 = (Keyword)cOperatorAlternatives_0.eContents().get(2);
		private final Keyword cOperatorNot_equal_toKeyword_0_3 = (Keyword)cOperatorAlternatives_0.eContents().get(3);
		private final Keyword cOperatorGreater_than_or_equal_toKeyword_0_4 = (Keyword)cOperatorAlternatives_0.eContents().get(4);
		private final Keyword cOperatorLess_than_or_equal_toKeyword_0_5 = (Keyword)cOperatorAlternatives_0.eContents().get(5);
		
		//Operator:
		//	operator=("less_than" | "equal_to" | "greater_than" | "not_equal_to" | "greater_than_or_equal_to" |
		//	"less_than_or_equal_to");
		public ParserRule getRule() { return rule; }

		//operator=("less_than" | "equal_to" | "greater_than" | "not_equal_to" | "greater_than_or_equal_to" |
		//"less_than_or_equal_to")
		public Assignment getOperatorAssignment() { return cOperatorAssignment; }

		//"less_than" | "equal_to" | "greater_than" | "not_equal_to" | "greater_than_or_equal_to" | "less_than_or_equal_to"
		public Alternatives getOperatorAlternatives_0() { return cOperatorAlternatives_0; }

		//"less_than"
		public Keyword getOperatorLess_thanKeyword_0_0() { return cOperatorLess_thanKeyword_0_0; }

		//"equal_to"
		public Keyword getOperatorEqual_toKeyword_0_1() { return cOperatorEqual_toKeyword_0_1; }

		//"greater_than"
		public Keyword getOperatorGreater_thanKeyword_0_2() { return cOperatorGreater_thanKeyword_0_2; }

		//"not_equal_to"
		public Keyword getOperatorNot_equal_toKeyword_0_3() { return cOperatorNot_equal_toKeyword_0_3; }

		//"greater_than_or_equal_to"
		public Keyword getOperatorGreater_than_or_equal_toKeyword_0_4() { return cOperatorGreater_than_or_equal_toKeyword_0_4; }

		//"less_than_or_equal_to"
		public Keyword getOperatorLess_than_or_equal_toKeyword_0_5() { return cOperatorLess_than_or_equal_toKeyword_0_5; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFromKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cSource_stateAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cSource_stateAlternatives_1_1_0 = (Alternatives)cSource_stateAssignment_1_1.eContents().get(0);
		private final RuleCall cSource_stateStateParserRuleCall_1_1_0_0 = (RuleCall)cSource_stateAlternatives_1_1_0.eContents().get(0);
		private final RuleCall cSource_stateParameterStateParserRuleCall_1_1_0_1 = (RuleCall)cSource_stateAlternatives_1_1_0.eContents().get(1);
		private final Keyword cToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTarget_stateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTarget_stateAlternatives_3_0 = (Alternatives)cTarget_stateAssignment_3.eContents().get(0);
		private final RuleCall cTarget_stateStateParserRuleCall_3_0_0 = (RuleCall)cTarget_stateAlternatives_3_0.eContents().get(0);
		private final RuleCall cTarget_stateParameterStateParserRuleCall_3_0_1 = (RuleCall)cTarget_stateAlternatives_3_0.eContents().get(1);
		
		//// Transitions
		//Transition:
		//	"go" ("from" source_state=(State | ParameterState))? "to" target_state=(State | ParameterState);
		public ParserRule getRule() { return rule; }

		//"go" ("from" source_state=(State | ParameterState))? "to" target_state=(State | ParameterState)
		public Group getGroup() { return cGroup; }

		//"go"
		public Keyword getGoKeyword_0() { return cGoKeyword_0; }

		//("from" source_state=(State | ParameterState))?
		public Group getGroup_1() { return cGroup_1; }

		//"from"
		public Keyword getFromKeyword_1_0() { return cFromKeyword_1_0; }

		//source_state=(State | ParameterState)
		public Assignment getSource_stateAssignment_1_1() { return cSource_stateAssignment_1_1; }

		//State | ParameterState
		public Alternatives getSource_stateAlternatives_1_1_0() { return cSource_stateAlternatives_1_1_0; }

		//State
		public RuleCall getSource_stateStateParserRuleCall_1_1_0_0() { return cSource_stateStateParserRuleCall_1_1_0_0; }

		//ParameterState
		public RuleCall getSource_stateParameterStateParserRuleCall_1_1_0_1() { return cSource_stateParameterStateParserRuleCall_1_1_0_1; }

		//"to"
		public Keyword getToKeyword_2() { return cToKeyword_2; }

		//target_state=(State | ParameterState)
		public Assignment getTarget_stateAssignment_3() { return cTarget_stateAssignment_3; }

		//State | ParameterState
		public Alternatives getTarget_stateAlternatives_3_0() { return cTarget_stateAlternatives_3_0; }

		//State
		public RuleCall getTarget_stateStateParserRuleCall_3_0_0() { return cTarget_stateStateParserRuleCall_3_0_0; }

		//ParameterState
		public RuleCall getTarget_stateParameterStateParserRuleCall_3_0_1() { return cTarget_stateParameterStateParserRuleCall_3_0_1; }
	}

	public class OutTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeaveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSource_stateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cSource_stateAlternatives_1_0 = (Alternatives)cSource_stateAssignment_1.eContents().get(0);
		private final RuleCall cSource_stateStateParserRuleCall_1_0_0 = (RuleCall)cSource_stateAlternatives_1_0.eContents().get(0);
		private final RuleCall cSource_stateParameterStateParserRuleCall_1_0_1 = (RuleCall)cSource_stateAlternatives_1_0.eContents().get(1);
		
		//OutTransition:
		//	"leave" source_state=(State | ParameterState);
		public ParserRule getRule() { return rule; }

		//"leave" source_state=(State | ParameterState)
		public Group getGroup() { return cGroup; }

		//"leave"
		public Keyword getLeaveKeyword_0() { return cLeaveKeyword_0; }

		//source_state=(State | ParameterState)
		public Assignment getSource_stateAssignment_1() { return cSource_stateAssignment_1; }

		//State | ParameterState
		public Alternatives getSource_stateAlternatives_1_0() { return cSource_stateAlternatives_1_0; }

		//State
		public RuleCall getSource_stateStateParserRuleCall_1_0_0() { return cSource_stateStateParserRuleCall_1_0_0; }

		//ParameterState
		public RuleCall getSource_stateParameterStateParserRuleCall_1_0_1() { return cSource_stateParameterStateParserRuleCall_1_0_1; }
	}

	public class NoTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemain_inKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cStateAlternatives_1_0 = (Alternatives)cStateAssignment_1.eContents().get(0);
		private final RuleCall cStateStateParserRuleCall_1_0_0 = (RuleCall)cStateAlternatives_1_0.eContents().get(0);
		private final RuleCall cStateParameterStateParserRuleCall_1_0_1 = (RuleCall)cStateAlternatives_1_0.eContents().get(1);
		
		//NoTransition:
		//	"remain_in" state=(State | ParameterState);
		public ParserRule getRule() { return rule; }

		//"remain_in" state=(State | ParameterState)
		public Group getGroup() { return cGroup; }

		//"remain_in"
		public Keyword getRemain_inKeyword_0() { return cRemain_inKeyword_0; }

		//state=(State | ParameterState)
		public Assignment getStateAssignment_1() { return cStateAssignment_1; }

		//State | ParameterState
		public Alternatives getStateAlternatives_1_0() { return cStateAlternatives_1_0; }

		//State
		public RuleCall getStateStateParserRuleCall_1_0_0() { return cStateStateParserRuleCall_1_0_0; }

		//ParameterState
		public RuleCall getStateParameterStateParserRuleCall_1_0_1() { return cStateParameterStateParserRuleCall_1_0_1; }
	}

	public class SystemElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "System");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cSystemAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cSystemSystemKeyword_0_0 = (Keyword)cSystemAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//System:
		//	system="system:" name=ID;
		public ParserRule getRule() { return rule; }

		//system="system:" name=ID
		public Group getGroup() { return cGroup; }

		//system="system:"
		public Assignment getSystemAssignment_0() { return cSystemAssignment_0; }

		//"system:"
		public Keyword getSystemSystemKeyword_0_0() { return cSystemSystemKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cActorActorKeyword_0_0 = (Keyword)cActorAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Actor:
		//	actor="actor:" name=ID;
		public ParserRule getRule() { return rule; }

		//actor="actor:" name=ID
		public Group getGroup() { return cGroup; }

		//actor="actor:"
		public Assignment getActorAssignment_0() { return cActorAssignment_0; }

		//"actor:"
		public Keyword getActorActorKeyword_0_0() { return cActorActorKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class UserElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "User");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUserAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cUserUserKeyword_0_0 = (Keyword)cUserAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//User:
		//	user="user:" name=ID;
		public ParserRule getRule() { return rule; }

		//user="user:" name=ID
		public Group getGroup() { return cGroup; }

		//user="user:"
		public Assignment getUserAssignment_0() { return cUserAssignment_0; }

		//"user:"
		public Keyword getUserUserKeyword_0_0() { return cUserUserKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cActionActionKeyword_0_0 = (Keyword)cActionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cParameterAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cParameterParameterParserRuleCall_2_0_0 = (RuleCall)cParameterAssignment_2_0.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueValueParserRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Keyword cToKeyword_3_0 = (Keyword)cAlternatives_3.eContents().get(0);
		private final Keyword cFromKeyword_3_1 = (Keyword)cAlternatives_3.eContents().get(1);
		private final Keyword cTheKeyword_3_2 = (Keyword)cAlternatives_3.eContents().get(2);
		private final Keyword cOnKeyword_3_3 = (Keyword)cAlternatives_3.eContents().get(3);
		private final Assignment cSubjectAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cSubjectAlternatives_4_0 = (Alternatives)cSubjectAssignment_4.eContents().get(0);
		private final RuleCall cSubjectSystemParserRuleCall_4_0_0 = (RuleCall)cSubjectAlternatives_4_0.eContents().get(0);
		private final RuleCall cSubjectActorParserRuleCall_4_0_1 = (RuleCall)cSubjectAlternatives_4_0.eContents().get(1);
		private final RuleCall cSubjectParameterParserRuleCall_4_0_2 = (RuleCall)cSubjectAlternatives_4_0.eContents().get(2);
		
		//Action:
		//	action="action:" name=ID (parameter=Parameter value=Value?)? ("to" | "from" | "the" | "on")? subject=(System | Actor
		//	| Parameter);
		public ParserRule getRule() { return rule; }

		//action="action:" name=ID (parameter=Parameter value=Value?)? ("to" | "from" | "the" | "on")? subject=(System | Actor |
		//Parameter)
		public Group getGroup() { return cGroup; }

		//action="action:"
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }

		//"action:"
		public Keyword getActionActionKeyword_0_0() { return cActionActionKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//(parameter=Parameter value=Value?)?
		public Group getGroup_2() { return cGroup_2; }

		//parameter=Parameter
		public Assignment getParameterAssignment_2_0() { return cParameterAssignment_2_0; }

		//Parameter
		public RuleCall getParameterParameterParserRuleCall_2_0_0() { return cParameterParameterParserRuleCall_2_0_0; }

		//value=Value?
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//Value
		public RuleCall getValueValueParserRuleCall_2_1_0() { return cValueValueParserRuleCall_2_1_0; }

		//("to" | "from" | "the" | "on")?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//"to"
		public Keyword getToKeyword_3_0() { return cToKeyword_3_0; }

		//"from"
		public Keyword getFromKeyword_3_1() { return cFromKeyword_3_1; }

		//"the"
		public Keyword getTheKeyword_3_2() { return cTheKeyword_3_2; }

		//"on"
		public Keyword getOnKeyword_3_3() { return cOnKeyword_3_3; }

		//subject=(System | Actor | Parameter)
		public Assignment getSubjectAssignment_4() { return cSubjectAssignment_4; }

		//System | Actor | Parameter
		public Alternatives getSubjectAlternatives_4_0() { return cSubjectAlternatives_4_0; }

		//System
		public RuleCall getSubjectSystemParserRuleCall_4_0_0() { return cSubjectSystemParserRuleCall_4_0_0; }

		//Actor
		public RuleCall getSubjectActorParserRuleCall_4_0_1() { return cSubjectActorParserRuleCall_4_0_1; }

		//Parameter
		public RuleCall getSubjectParameterParserRuleCall_4_0_2() { return cSubjectParameterParserRuleCall_4_0_2; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStateAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cStateStateKeyword_0_0 = (Keyword)cStateAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//State:
		//	state="state:" name=ID;
		public ParserRule getRule() { return rule; }

		//state="state:" name=ID
		public Group getGroup() { return cGroup; }

		//state="state:"
		public Assignment getStateAssignment_0() { return cStateAssignment_0; }

		//"state:"
		public Keyword getStateStateKeyword_0_0() { return cStateStateKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAttributeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cAttributeAttributeKeyword_0_0 = (Keyword)cAttributeAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeIDTerminalRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Attribute:
		//	attribute="attribute:" name=ID "type:" type=ID;
		public ParserRule getRule() { return rule; }

		//attribute="attribute:" name=ID "type:" type=ID
		public Group getGroup() { return cGroup; }

		//attribute="attribute:"
		public Assignment getAttributeAssignment_0() { return cAttributeAssignment_0; }

		//"attribute:"
		public Keyword getAttributeAttributeKeyword_0_0() { return cAttributeAttributeKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"type:"
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }

		//type=ID
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_3_0() { return cTypeIDTerminalRuleCall_3_0; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cFunctionFunctionKeyword_0_0 = (Keyword)cFunctionAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cTypeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeIDTerminalRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		
		//Function:
		//	function="function:" name=ID "type:" type=ID;
		public ParserRule getRule() { return rule; }

		//function="function:" name=ID "type:" type=ID
		public Group getGroup() { return cGroup; }

		//function="function:"
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//"function:"
		public Keyword getFunctionFunctionKeyword_0_0() { return cFunctionFunctionKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"type:"
		public Keyword getTypeKeyword_2() { return cTypeKeyword_2; }

		//type=ID
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//ID
		public RuleCall getTypeIDTerminalRuleCall_3_0() { return cTypeIDTerminalRuleCall_3_0; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cParameterAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cParameterParameterKeyword_0_0 = (Keyword)cParameterAssignment_0.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Parameter:
		//	parameter="parameter:" name=ID;
		public ParserRule getRule() { return rule; }

		//parameter="parameter:" name=ID
		public Group getGroup() { return cGroup; }

		//parameter="parameter:"
		public Assignment getParameterAssignment_0() { return cParameterAssignment_0; }

		//"parameter:"
		public Keyword getParameterParameterKeyword_0_0() { return cParameterParameterKeyword_0_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cValAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cValValueKeyword_0_0 = (Keyword)cValAssignment_0.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Value:
		//	val="value:" value=INT;
		public ParserRule getRule() { return rule; }

		//val="value:" value=INT
		public Group getGroup() { return cGroup; }

		//val="value:"
		public Assignment getValAssignment_0() { return cValAssignment_0; }

		//"value:"
		public Keyword getValValueKeyword_0_0() { return cValValueKeyword_0_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }
	}

	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Time");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		private final Assignment cTimeUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTimeUnitAlternatives_2_0 = (Alternatives)cTimeUnitAssignment_2.eContents().get(0);
		private final Keyword cTimeUnitSKeyword_2_0_0 = (Keyword)cTimeUnitAlternatives_2_0.eContents().get(0);
		private final Keyword cTimeUnitMKeyword_2_0_1 = (Keyword)cTimeUnitAlternatives_2_0.eContents().get(1);
		private final Keyword cTimeUnitHKeyword_2_0_2 = (Keyword)cTimeUnitAlternatives_2_0.eContents().get(2);
		
		//Time:
		//	"time:" value=INT timeUnit=("s" | "m" | "h")?;
		public ParserRule getRule() { return rule; }

		//"time:" value=INT timeUnit=("s" | "m" | "h")?
		public Group getGroup() { return cGroup; }

		//"time:"
		public Keyword getTimeKeyword_0() { return cTimeKeyword_0; }

		//value=INT
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_1_0() { return cValueINTTerminalRuleCall_1_0; }

		//timeUnit=("s" | "m" | "h")?
		public Assignment getTimeUnitAssignment_2() { return cTimeUnitAssignment_2; }

		//"s" | "m" | "h"
		public Alternatives getTimeUnitAlternatives_2_0() { return cTimeUnitAlternatives_2_0; }

		//"s"
		public Keyword getTimeUnitSKeyword_2_0_0() { return cTimeUnitSKeyword_2_0_0; }

		//"m"
		public Keyword getTimeUnitMKeyword_2_0_1() { return cTimeUnitMKeyword_2_0_1; }

		//"h"
		public Keyword getTimeUnitHKeyword_2_0_2() { return cTimeUnitHKeyword_2_0_2; }
	}

	public class TimingConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimingConstraint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTimingConstraintAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cTimingConstraintAlternatives_0_0 = (Alternatives)cTimingConstraintAssignment_0.eContents().get(0);
		private final Keyword cTimingConstraintWithinKeyword_0_0_0 = (Keyword)cTimingConstraintAlternatives_0_0.eContents().get(0);
		private final Keyword cTimingConstraintEveryKeyword_0_0_1 = (Keyword)cTimingConstraintAlternatives_0_0.eContents().get(1);
		private final Keyword cTimingConstraintForKeyword_0_0_2 = (Keyword)cTimingConstraintAlternatives_0_0.eContents().get(2);
		private final Assignment cMinmaxAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cMinmaxAlternatives_1_0 = (Alternatives)cMinmaxAssignment_1.eContents().get(0);
		private final Keyword cMinmaxLessThanKeyword_1_0_0 = (Keyword)cMinmaxAlternatives_1_0.eContents().get(0);
		private final Keyword cMinmaxAtLeastKeyword_1_0_1 = (Keyword)cMinmaxAlternatives_1_0.eContents().get(1);
		private final Assignment cTimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTimeTimeParserRuleCall_2_0 = (RuleCall)cTimeAssignment_2.eContents().get(0);
		
		//TimingConstraint:
		//	timingConstraint=("within" | "every" | "for") minmax=("less than" | "at least")? time=Time;
		public ParserRule getRule() { return rule; }

		//timingConstraint=("within" | "every" | "for") minmax=("less than" | "at least")? time=Time
		public Group getGroup() { return cGroup; }

		//timingConstraint=("within" | "every" | "for")
		public Assignment getTimingConstraintAssignment_0() { return cTimingConstraintAssignment_0; }

		//"within" | "every" | "for"
		public Alternatives getTimingConstraintAlternatives_0_0() { return cTimingConstraintAlternatives_0_0; }

		//"within"
		public Keyword getTimingConstraintWithinKeyword_0_0_0() { return cTimingConstraintWithinKeyword_0_0_0; }

		//"every"
		public Keyword getTimingConstraintEveryKeyword_0_0_1() { return cTimingConstraintEveryKeyword_0_0_1; }

		//"for"
		public Keyword getTimingConstraintForKeyword_0_0_2() { return cTimingConstraintForKeyword_0_0_2; }

		//minmax=("less than" | "at least")?
		public Assignment getMinmaxAssignment_1() { return cMinmaxAssignment_1; }

		//"less than" | "at least"
		public Alternatives getMinmaxAlternatives_1_0() { return cMinmaxAlternatives_1_0; }

		//"less than"
		public Keyword getMinmaxLessThanKeyword_1_0_0() { return cMinmaxLessThanKeyword_1_0_0; }

		//"at least"
		public Keyword getMinmaxAtLeastKeyword_1_0_1() { return cMinmaxAtLeastKeyword_1_0_1; }

		//time=Time
		public Assignment getTimeAssignment_2() { return cTimeAssignment_2; }

		//Time
		public RuleCall getTimeTimeParserRuleCall_2_0() { return cTimeTimeParserRuleCall_2_0; }
	}
	
	
	private final ModelElements pModel;
	private final RequirementElements pRequirement;
	private final ReqIDElements pReqID;
	private final PrefixElements pPrefix;
	private final PrefixRightOperandElements pPrefixRightOperand;
	private final PrefixStateElements pPrefixState;
	private final PrefixConditionElements pPrefixCondition;
	private final PrefixEventElements pPrefixEvent;
	private final PrefixFixedSyntaxElements pPrefixFixedSyntax;
	private final ParamEventElements pParamEvent;
	private final ActorEventElements pActorEvent;
	private final StateEventElements pStateEvent;
	private final ParameterStateElements pParameterState;
	private final MainFunctionElements pMainFunction;
	private final MainCompositionElements pMainComposition;
	private final MainStateTransitionElements pMainStateTransition;
	private final MainAttributesElements pMainAttributes;
	private final MainFunctionsElements pMainFunctions;
	private final OperatorElements pOperator;
	private final TransitionElements pTransition;
	private final OutTransitionElements pOutTransition;
	private final NoTransitionElements pNoTransition;
	private final SystemElements pSystem;
	private final ActorElements pActor;
	private final UserElements pUser;
	private final ActionElements pAction;
	private final StateElements pState;
	private final AttributeElements pAttribute;
	private final FunctionElements pFunction;
	private final ParameterElements pParameter;
	private final ValueElements pValue;
	private final TimeElements pTime;
	private final TimingConstraintElements pTimingConstraint;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReqLanguageGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pRequirement = new RequirementElements();
		this.pReqID = new ReqIDElements();
		this.pPrefix = new PrefixElements();
		this.pPrefixRightOperand = new PrefixRightOperandElements();
		this.pPrefixState = new PrefixStateElements();
		this.pPrefixCondition = new PrefixConditionElements();
		this.pPrefixEvent = new PrefixEventElements();
		this.pPrefixFixedSyntax = new PrefixFixedSyntaxElements();
		this.pParamEvent = new ParamEventElements();
		this.pActorEvent = new ActorEventElements();
		this.pStateEvent = new StateEventElements();
		this.pParameterState = new ParameterStateElements();
		this.pMainFunction = new MainFunctionElements();
		this.pMainComposition = new MainCompositionElements();
		this.pMainStateTransition = new MainStateTransitionElements();
		this.pMainAttributes = new MainAttributesElements();
		this.pMainFunctions = new MainFunctionsElements();
		this.pOperator = new OperatorElements();
		this.pTransition = new TransitionElements();
		this.pOutTransition = new OutTransitionElements();
		this.pNoTransition = new NoTransitionElements();
		this.pSystem = new SystemElements();
		this.pActor = new ActorElements();
		this.pUser = new UserElements();
		this.pAction = new ActionElements();
		this.pState = new StateElements();
		this.pAttribute = new AttributeElements();
		this.pFunction = new FunctionElements();
		this.pParameter = new ParameterElements();
		this.pValue = new ValueElements();
		this.pTime = new TimeElements();
		this.pTimingConstraint = new TimingConstraintElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.language.ReqLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	requirements+=Requirement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	/////  | MainComposition
	//Requirement:
	//	reqID=ReqID prefix=Prefix? mainRequirement=(MainFunction | MainComposition | MainStateTransition | MainAttributes |
	//	MainFunctions) ".";
	public RequirementElements getRequirementAccess() {
		return pRequirement;
	}
	
	public ParserRule getRequirementRule() {
		return getRequirementAccess().getRule();
	}

	//ReqID:
	//	reqID="ID:" name=STRING;
	public ReqIDElements getReqIDAccess() {
		return pReqID;
	}
	
	public ParserRule getReqIDRule() {
		return getReqIDAccess().getRule();
	}

	//// Prefixes
	//Prefix:
	//	leftOperand=(PrefixCondition | PrefixState | PrefixEvent) prefixList+=PrefixRightOperand*;
	public PrefixElements getPrefixAccess() {
		return pPrefix;
	}
	
	public ParserRule getPrefixRule() {
		return getPrefixAccess().getRule();
	}

	//PrefixRightOperand:
	//	operator=("and" | "or") prefixRightOperand=(PrefixCondition | PrefixState | PrefixEvent);
	public PrefixRightOperandElements getPrefixRightOperandAccess() {
		return pPrefixRightOperand;
	}
	
	public ParserRule getPrefixRightOperandRule() {
		return getPrefixRightOperandAccess().getRule();
	}

	//PrefixState:
	//	prefixFixedSyntax=PrefixFixedSyntax stateExpression=(State | ParameterState);
	public PrefixStateElements getPrefixStateAccess() {
		return pPrefixState;
	}
	
	public ParserRule getPrefixStateRule() {
		return getPrefixStateAccess().getRule();
	}

	//PrefixCondition:
	//	prefixFixedSyntax=PrefixFixedSyntax parameter=(Time | Parameter) ("is" | "has") operator=Operator? (value=Value |
	//	time=TimingConstraint)?;
	public PrefixConditionElements getPrefixConditionAccess() {
		return pPrefixCondition;
	}
	
	public ParserRule getPrefixConditionRule() {
		return getPrefixConditionAccess().getRule();
	}

	//PrefixEvent:
	//	prefixFixedSyntax=PrefixFixedSyntax event_expression=(ParamEvent | ActorEvent | StateEvent);
	public PrefixEventElements getPrefixEventAccess() {
		return pPrefixEvent;
	}
	
	public ParserRule getPrefixEventRule() {
		return getPrefixEventAccess().getRule();
	}

	//PrefixFixedSyntax:
	//	"While" | "If" | "As" "soon" "as" | "while" | "if" | "as" "soon" "as";
	public PrefixFixedSyntaxElements getPrefixFixedSyntaxAccess() {
		return pPrefixFixedSyntax;
	}
	
	public ParserRule getPrefixFixedSyntaxRule() {
		return getPrefixFixedSyntaxAccess().getRule();
	}

	//// Events
	//ParamEvent:
	//	parameter=(Time | Parameter) action=("increases above" | "decreases below" | "reaches") value=Value;
	public ParamEventElements getParamEventAccess() {
		return pParamEvent;
	}
	
	public ParserRule getParamEventRule() {
		return getParamEventAccess().getRule();
	}

	//ActorEvent:
	//	actor=(System | User) action=("activates" | "deactivates") entity=Parameter;
	public ActorEventElements getActorEventAccess() {
		return pActorEvent;
	}
	
	public ParserRule getActorEventRule() {
		return getActorEventAccess().getRule();
	}

	//StateEvent:
	//	system=System "starts" "in"? state=State;
	public StateEventElements getStateEventAccess() {
		return pStateEvent;
	}
	
	public ParserRule getStateEventRule() {
		return getStateEventAccess().getRule();
	}

	//ParameterState:
	//	parameter=Parameter "is"? parameter_value=(Value | State)?;
	public ParameterStateElements getParameterStateAccess() {
		return pParameterState;
	}
	
	public ParserRule getParameterStateRule() {
		return getParameterStateAccess().getRule();
	}

	//// Mains
	//MainFunction:
	//	("The" | "the") system=(System | Actor) "shall" "not"? ("be" "able" "to")? function=Action;
	public MainFunctionElements getMainFunctionAccess() {
		return pMainFunction;
	}
	
	public ParserRule getMainFunctionRule() {
		return getMainFunctionAccess().getRule();
	}

	//MainComposition:
	//	("The" | "the") system=System "shall" "consist" "of" "the" "subsystems" subsystemList+=System (","
	//	subsystemList+=System)*;
	public MainCompositionElements getMainCompositionAccess() {
		return pMainComposition;
	}
	
	public ParserRule getMainCompositionRule() {
		return getMainCompositionAccess().getRule();
	}

	//MainStateTransition:
	//	("The" | "the") system=System "shall" transition=(Transition | OutTransition | NoTransition) ("and"
	//	function=Action)?;
	public MainStateTransitionElements getMainStateTransitionAccess() {
		return pMainStateTransition;
	}
	
	public ParserRule getMainStateTransitionRule() {
		return getMainStateTransitionAccess().getRule();
	}

	//MainAttributes:
	//	("The" | "the") system=System "shall" "have" "the" "attributes" attributeList+=Attribute (","
	//	attributeList+=Attribute)*;
	public MainAttributesElements getMainAttributesAccess() {
		return pMainAttributes;
	}
	
	public ParserRule getMainAttributesRule() {
		return getMainAttributesAccess().getRule();
	}

	//MainFunctions:
	//	("The" | "the") system=System "shall" "have" "the" "functions" functionList+=Function ("," functionList+=Function)*;
	public MainFunctionsElements getMainFunctionsAccess() {
		return pMainFunctions;
	}
	
	public ParserRule getMainFunctionsRule() {
		return getMainFunctionsAccess().getRule();
	}

	//Operator:
	//	operator=("less_than" | "equal_to" | "greater_than" | "not_equal_to" | "greater_than_or_equal_to" |
	//	"less_than_or_equal_to");
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//// Transitions
	//Transition:
	//	"go" ("from" source_state=(State | ParameterState))? "to" target_state=(State | ParameterState);
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//OutTransition:
	//	"leave" source_state=(State | ParameterState);
	public OutTransitionElements getOutTransitionAccess() {
		return pOutTransition;
	}
	
	public ParserRule getOutTransitionRule() {
		return getOutTransitionAccess().getRule();
	}

	//NoTransition:
	//	"remain_in" state=(State | ParameterState);
	public NoTransitionElements getNoTransitionAccess() {
		return pNoTransition;
	}
	
	public ParserRule getNoTransitionRule() {
		return getNoTransitionAccess().getRule();
	}

	//System:
	//	system="system:" name=ID;
	public SystemElements getSystemAccess() {
		return pSystem;
	}
	
	public ParserRule getSystemRule() {
		return getSystemAccess().getRule();
	}

	//Actor:
	//	actor="actor:" name=ID;
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}

	//User:
	//	user="user:" name=ID;
	public UserElements getUserAccess() {
		return pUser;
	}
	
	public ParserRule getUserRule() {
		return getUserAccess().getRule();
	}

	//Action:
	//	action="action:" name=ID (parameter=Parameter value=Value?)? ("to" | "from" | "the" | "on")? subject=(System | Actor
	//	| Parameter);
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//State:
	//	state="state:" name=ID;
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Attribute:
	//	attribute="attribute:" name=ID "type:" type=ID;
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}

	//Function:
	//	function="function:" name=ID "type:" type=ID;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//Parameter:
	//	parameter="parameter:" name=ID;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//Value:
	//	val="value:" value=INT;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//Time:
	//	"time:" value=INT timeUnit=("s" | "m" | "h")?;
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}

	//TimingConstraint:
	//	timingConstraint=("within" | "every" | "for") minmax=("less than" | "at least")? time=Time;
	public TimingConstraintElements getTimingConstraintAccess() {
		return pTimingConstraint;
	}
	
	public ParserRule getTimingConstraintRule() {
		return getTimingConstraintAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
