/**
 * generated by Xtext
 */
package org.language.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.util.ArrayList;
import java.util.HashMap;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.InputOutput;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.language.generator.Sequence;
import org.language.generator.StringTuple;
import org.language.generator.Tree;
import org.language.reqLanguage.Action;
import org.language.reqLanguage.Actor;
import org.language.reqLanguage.ActorEvent;
import org.language.reqLanguage.Attribute;
import org.language.reqLanguage.Function;
import org.language.reqLanguage.MainAttributes;
import org.language.reqLanguage.MainComposition;
import org.language.reqLanguage.MainFunction;
import org.language.reqLanguage.MainFunctions;
import org.language.reqLanguage.Model;
import org.language.reqLanguage.Operator;
import org.language.reqLanguage.ParamEvent;
import org.language.reqLanguage.Parameter;
import org.language.reqLanguage.ParameterState;
import org.language.reqLanguage.Prefix;
import org.language.reqLanguage.PrefixCondition;
import org.language.reqLanguage.PrefixEvent;
import org.language.reqLanguage.PrefixRightOperand;
import org.language.reqLanguage.PrefixState;
import org.language.reqLanguage.Requirement;
import org.language.reqLanguage.State;
import org.language.reqLanguage.StateEvent;
import org.language.reqLanguage.Time;
import org.language.reqLanguage.TimingConstraint;
import org.language.reqLanguage.User;
import org.language.reqLanguage.Value;

@SuppressWarnings("all")
public class ReqLanguageGenerator implements IGenerator {
  private HashMap<String, Integer> entityIds = new HashMap<String, Integer>();
  
  private int idCounter = 0;
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Model> _filter = Iterables.<Model>filter(_iterable, Model.class);
    for (final Model model : _filter) {
      {
        final Tree<String> classTree = this.createClassTree(model);
        final ArrayList<Sequence> sequenceArray = this.createSequenceArray(model);
        CharSequence _createUMLModel = this.createUMLModel(classTree);
        fsa.generateFile("system.xmi", _createUMLModel);
        CharSequence _createClassDiagram = this.createClassDiagram(classTree);
        fsa.generateFile("classdiagram.reqld", _createClassDiagram);
        CharSequence _createSequenceDiagram = this.createSequenceDiagram(sequenceArray);
        fsa.generateFile("sequencediagram.reqld", _createSequenceDiagram);
      }
    }
  }
  
  public int getXmiId(final String name) {
    boolean _containsKey = this.entityIds.containsKey(name);
    if (_containsKey) {
      return (this.entityIds.get(name)).intValue();
    } else {
      int _plusPlus = this.idCounter++;
      this.entityIds.put(name, Integer.valueOf(_plusPlus));
      return (this.idCounter - 1);
    }
  }
  
  public Tree<String> createClassTree(final Model m) {
    final Tree<String> tree = new Tree<String>();
    tree.add("root");
    EList<Requirement> _requirements = m.getRequirements();
    for (final Requirement requirement : _requirements) {
      EObject _mainRequirement = requirement.getMainRequirement();
      if ((_mainRequirement instanceof MainComposition)) {
        EObject _mainRequirement_1 = requirement.getMainRequirement();
        this.addRequirementToTree(((MainComposition) _mainRequirement_1), tree);
      } else {
        EObject _mainRequirement_2 = requirement.getMainRequirement();
        if ((_mainRequirement_2 instanceof MainAttributes)) {
          EObject _mainRequirement_3 = requirement.getMainRequirement();
          this.addRequirementAttributeToTree(((MainAttributes) _mainRequirement_3), tree);
        } else {
          EObject _mainRequirement_4 = requirement.getMainRequirement();
          if ((_mainRequirement_4 instanceof MainFunctions)) {
            EObject _mainRequirement_5 = requirement.getMainRequirement();
            this.addRequirementFunctionToTree(((MainFunctions) _mainRequirement_5), tree);
          }
        }
      }
    }
    return tree;
  }
  
  public void addRequirementAttributeToTree(final MainAttributes main, final Tree<String> tree) {
    InputOutput.<String>println("addAttribute");
    org.language.reqLanguage.System _system = main.getSystem();
    String _name = _system.getName();
    final Tree<String> node = tree.find(_name);
    boolean _notEquals = (!Objects.equal(node, null));
    if (_notEquals) {
      InputOutput.<String>println("addAttribute2");
      EList<Attribute> _attributeList = main.getAttributeList();
      for (final Attribute attribute : _attributeList) {
        String _type = attribute.getType();
        String _name_1 = attribute.getName();
        StringTuple _stringTuple = new StringTuple(_type, _name_1);
        node.addAttribute(_stringTuple);
      }
    }
  }
  
  public void addRequirementFunctionToTree(final MainFunctions main, final Tree<String> tree) {
    org.language.reqLanguage.System _system = main.getSystem();
    String _name = _system.getName();
    final Tree<String> node = tree.find(_name);
    boolean _notEquals = (!Objects.equal(node, null));
    if (_notEquals) {
      EList<Function> _functionList = main.getFunctionList();
      for (final Function function : _functionList) {
        {
          String _name_1 = function.getName();
          InputOutput.<String>println(_name_1);
          String _type = function.getType();
          String _name_2 = function.getName();
          StringTuple _stringTuple = new StringTuple(_type, _name_2);
          node.addFunction(_stringTuple);
        }
      }
    }
  }
  
  public void addRequirementToTree(final MainComposition main, final Tree<String> tree) {
    org.language.reqLanguage.System _system = main.getSystem();
    String _name = _system.getName();
    tree.add(_name);
    EList<org.language.reqLanguage.System> _subsystemList = main.getSubsystemList();
    for (final org.language.reqLanguage.System ss : _subsystemList) {
      org.language.reqLanguage.System _system_1 = main.getSystem();
      String _name_1 = _system_1.getName();
      Tree<String> _find = tree.find(_name_1);
      String _name_2 = ss.getName();
      _find.add(_name_2);
    }
  }
  
  public String getActor(final MainFunction main) {
    String actor = "";
    EObject _system = main.getSystem();
    if ((_system instanceof org.language.reqLanguage.System)) {
      EObject _system_1 = main.getSystem();
      final org.language.reqLanguage.System s = ((org.language.reqLanguage.System) _system_1);
      String _name = s.getName();
      actor = _name;
    } else {
      EObject _system_2 = main.getSystem();
      if ((_system_2 instanceof Actor)) {
        EObject _system_3 = main.getSystem();
        final Actor a = ((Actor) _system_3);
        String _name_1 = a.getName();
        actor = _name_1;
      } else {
        actor = "user";
      }
    }
    return actor;
  }
  
  public String getSubject(final MainFunction main) {
    String subject = null;
    Action _function = main.getFunction();
    EObject _subject = _function.getSubject();
    if ((_subject instanceof org.language.reqLanguage.System)) {
      Action _function_1 = main.getFunction();
      EObject _subject_1 = _function_1.getSubject();
      final org.language.reqLanguage.System system = ((org.language.reqLanguage.System) _subject_1);
      String _name = system.getName();
      subject = _name;
    } else {
      Action _function_2 = main.getFunction();
      EObject _subject_2 = _function_2.getSubject();
      if ((_subject_2 instanceof Actor)) {
        Action _function_3 = main.getFunction();
        EObject _subject_3 = _function_3.getSubject();
        final Actor actor = ((Actor) _subject_3);
        String _name_1 = actor.getName();
        subject = _name_1;
      } else {
        Action _function_4 = main.getFunction();
        EObject _subject_4 = _function_4.getSubject();
        if ((_subject_4 instanceof Parameter)) {
          Action _function_5 = main.getFunction();
          EObject _subject_5 = _function_5.getSubject();
          final Parameter parameter = ((Parameter) _subject_5);
          String _name_2 = parameter.getName();
          subject = _name_2;
        }
      }
    }
    return subject;
  }
  
  public String getParameter(final MainFunction main) {
    String parameter = null;
    Action _function = main.getFunction();
    Parameter _parameter = _function.getParameter();
    boolean _notEquals = (!Objects.equal(_parameter, null));
    if (_notEquals) {
      Action _function_1 = main.getFunction();
      Parameter _parameter_1 = _function_1.getParameter();
      final Parameter param = ((Parameter) _parameter_1);
      String _name = param.getName();
      parameter = _name;
    }
    return parameter;
  }
  
  public String getAction(final MainFunction main) {
    Action _function = main.getFunction();
    return _function.getName();
  }
  
  public ArrayList<Sequence> createSequenceArray(final Model m) {
    final ArrayList<Sequence> array = new ArrayList<Sequence>();
    EList<Requirement> _requirements = m.getRequirements();
    for (final Requirement requirement : _requirements) {
      EObject _mainRequirement = requirement.getMainRequirement();
      if ((_mainRequirement instanceof MainFunction)) {
        Prefix _prefix = requirement.getPrefix();
        final Prefix prefix = ((Prefix) _prefix);
        this.addRequirementToSequenceArray(prefix, requirement, array);
      }
    }
    return array;
  }
  
  public ArrayList<Sequence> addRequirementToSequenceArray(final Prefix prefix, final Requirement requirement, final ArrayList<Sequence> array) {
    EObject _mainRequirement = requirement.getMainRequirement();
    final MainFunction main = ((MainFunction) _mainRequirement);
    final String prefixString = this.processPrefix(prefix);
    final String actor = this.getActor(main);
    final String subject = this.getSubject(main);
    final String parameter = this.getParameter(main);
    final String action = this.getAction(main);
    boolean _and = false;
    boolean _and_1 = false;
    boolean _notEquals = (!Objects.equal(actor, null));
    if (!_notEquals) {
      _and_1 = false;
    } else {
      boolean _notEquals_1 = (!Objects.equal(subject, null));
      _and_1 = _notEquals_1;
    }
    if (!_and_1) {
      _and = false;
    } else {
      boolean _notEquals_2 = (!Objects.equal(action, null));
      _and = _notEquals_2;
    }
    if (_and) {
      Action _function = main.getFunction();
      Value _value = _function.getValue();
      boolean _notEquals_3 = (!Objects.equal(_value, null));
      if (_notEquals_3) {
        Action _function_1 = main.getFunction();
        Value _value_1 = _function_1.getValue();
        int _value_2 = _value_1.getValue();
        Sequence _sequence = new Sequence(actor, subject, action, parameter, _value_2, prefixString);
        array.add(_sequence);
      } else {
        Sequence _sequence_1 = new Sequence(actor, subject, action, parameter, prefixString);
        array.add(_sequence_1);
      }
    } else {
      InputOutput.<String>println("addRequirementToSequenceArray: didn\'t add sequence, something\'s null");
    }
    return array;
  }
  
  public String processPrefix(final Prefix prefix) {
    String out = "";
    boolean _notEquals = (!Objects.equal(prefix, null));
    if (_notEquals) {
      EObject _leftOperand = prefix.getLeftOperand();
      if ((_leftOperand instanceof PrefixState)) {
        String _out = out;
        EObject _leftOperand_1 = prefix.getLeftOperand();
        String _processPrefixState = this.processPrefixState(((PrefixState) _leftOperand_1));
        out = (_out + _processPrefixState);
      } else {
        EObject _leftOperand_2 = prefix.getLeftOperand();
        if ((_leftOperand_2 instanceof PrefixCondition)) {
          String _out_1 = out;
          EObject _leftOperand_3 = prefix.getLeftOperand();
          String _processPrefixCondition = this.processPrefixCondition(((PrefixCondition) _leftOperand_3));
          out = (_out_1 + _processPrefixCondition);
        } else {
          EObject _leftOperand_4 = prefix.getLeftOperand();
          if ((_leftOperand_4 instanceof PrefixEvent)) {
            String _out_2 = out;
            EObject _leftOperand_5 = prefix.getLeftOperand();
            String _processPrefixEvent = this.processPrefixEvent(((PrefixEvent) _leftOperand_5));
            out = (_out_2 + _processPrefixEvent);
          }
        }
      }
      EList<PrefixRightOperand> _prefixList = prefix.getPrefixList();
      for (final PrefixRightOperand p : _prefixList) {
        {
          String _operator = p.getOperator();
          boolean _equals = Objects.equal(_operator, "and");
          if (_equals) {
            String _out_3 = out;
            out = (_out_3 + " && ");
          } else {
            String _operator_1 = p.getOperator();
            boolean _equals_1 = Objects.equal(_operator_1, "or");
            if (_equals_1) {
              String _out_4 = out;
              out = (_out_4 + " || ");
            }
          }
          EObject _prefixRightOperand = p.getPrefixRightOperand();
          if ((_prefixRightOperand instanceof PrefixState)) {
            String _out_5 = out;
            EObject _prefixRightOperand_1 = p.getPrefixRightOperand();
            String _processPrefixState_1 = this.processPrefixState(((PrefixState) _prefixRightOperand_1));
            out = (_out_5 + _processPrefixState_1);
          } else {
            EObject _prefixRightOperand_2 = p.getPrefixRightOperand();
            if ((_prefixRightOperand_2 instanceof PrefixCondition)) {
              String _out_6 = out;
              EObject _prefixRightOperand_3 = p.getPrefixRightOperand();
              String _processPrefixCondition_1 = this.processPrefixCondition(((PrefixCondition) _prefixRightOperand_3));
              out = (_out_6 + _processPrefixCondition_1);
            } else {
              EObject _prefixRightOperand_4 = p.getPrefixRightOperand();
              if ((_prefixRightOperand_4 instanceof PrefixEvent)) {
                String _out_7 = out;
                EObject _prefixRightOperand_5 = p.getPrefixRightOperand();
                String _processPrefixEvent_1 = this.processPrefixEvent(((PrefixEvent) _prefixRightOperand_5));
                out = (_out_7 + _processPrefixEvent_1);
              }
            }
          }
        }
      }
    }
    return out;
  }
  
  public String processPrefixState(final PrefixState p) {
    String _xblockexpression = null;
    {
      String out = "";
      String _prefixFixedSyntax = p.getPrefixFixedSyntax();
      String _plus = ("processPrefixState: " + _prefixFixedSyntax);
      InputOutput.<String>println(_plus);
      String _out = out;
      String _prefixFixedSyntax_1 = p.getPrefixFixedSyntax();
      out = (_out + _prefixFixedSyntax_1);
      String _xifexpression = null;
      EObject _stateExpression = p.getStateExpression();
      if ((_stateExpression instanceof State)) {
        String _xblockexpression_1 = null;
        {
          EObject _stateExpression_1 = p.getStateExpression();
          final State s = ((State) _stateExpression_1);
          String _name = s.getName();
          String _plus_1 = ("processPrefixStateIf: " + _name);
          InputOutput.<String>println(_plus_1);
          String _out_1 = out;
          String _name_1 = s.getName();
          String _plus_2 = (" " + _name_1);
          _xblockexpression_1 = out = (_out_1 + _plus_2);
        }
        _xifexpression = _xblockexpression_1;
      } else {
        String _xifexpression_1 = null;
        EObject _stateExpression_1 = p.getStateExpression();
        if ((_stateExpression_1 instanceof ParameterState)) {
          String _xblockexpression_2 = null;
          {
            EObject _stateExpression_2 = p.getStateExpression();
            final ParameterState s = ((ParameterState) _stateExpression_2);
            Parameter _parameter = s.getParameter();
            String _name = _parameter.getName();
            String _plus_1 = ("processPrefixStateElseIf: " + _name);
            InputOutput.<String>println(_plus_1);
            String _out_1 = out;
            Parameter _parameter_1 = s.getParameter();
            String _name_1 = _parameter_1.getName();
            String _plus_2 = (" " + _name_1);
            out = (_out_1 + _plus_2);
            String _xifexpression_2 = null;
            EObject _parameter_value = s.getParameter_value();
            if ((_parameter_value instanceof Value)) {
              String _xblockexpression_3 = null;
              {
                EObject _parameter_value_1 = s.getParameter_value();
                Value value = ((Value) _parameter_value_1);
                String _out_2 = out;
                int _value = value.getValue();
                String _plus_3 = (" == " + Integer.valueOf(_value));
                _xblockexpression_3 = out = (_out_2 + _plus_3);
              }
              _xifexpression_2 = _xblockexpression_3;
            } else {
              String _xifexpression_3 = null;
              EObject _parameter_value_1 = s.getParameter_value();
              if ((_parameter_value_1 instanceof State)) {
                String _xblockexpression_4 = null;
                {
                  EObject _parameter_value_2 = s.getParameter_value();
                  State state = ((State) _parameter_value_2);
                  String _out_2 = out;
                  String _name_2 = state.getName();
                  String _plus_3 = (" == " + _name_2);
                  _xblockexpression_4 = out = (_out_2 + _plus_3);
                }
                _xifexpression_3 = _xblockexpression_4;
              } else {
                String _out_2 = out;
                _xifexpression_3 = out = (_out_2 + "error");
              }
              _xifexpression_2 = _xifexpression_3;
            }
            _xblockexpression_2 = _xifexpression_2;
          }
          _xifexpression_1 = _xblockexpression_2;
        }
        _xifexpression = _xifexpression_1;
      }
      _xblockexpression = _xifexpression;
    }
    return _xblockexpression;
  }
  
  public String processPrefixCondition(final PrefixCondition p) {
    String out = "";
    String _prefixFixedSyntax = p.getPrefixFixedSyntax();
    String _plus = ("Condition" + _prefixFixedSyntax);
    InputOutput.<String>println(_plus);
    String _out = out;
    String _prefixFixedSyntax_1 = p.getPrefixFixedSyntax();
    out = (_out + _prefixFixedSyntax_1);
    EObject _parameter = p.getParameter();
    if ((_parameter instanceof Time)) {
      EObject _parameter_1 = p.getParameter();
      final Time t = ((Time) _parameter_1);
      String _out_1 = out;
      int _value = t.getValue();
      String _plus_1 = (" " + Integer.valueOf(_value));
      String _timeUnit = t.getTimeUnit();
      String _plus_2 = (_plus_1 + _timeUnit);
      out = (_out_1 + _plus_2);
    } else {
      EObject _parameter_2 = p.getParameter();
      if ((_parameter_2 instanceof Parameter)) {
        EObject _parameter_3 = p.getParameter();
        final Parameter param = ((Parameter) _parameter_3);
        String _out_2 = out;
        String _name = param.getName();
        String _plus_3 = (" " + _name);
        out = (_out_2 + _plus_3);
      }
    }
    Operator _operator = p.getOperator();
    String _operator_1 = _operator.getOperator();
    boolean _matched = false;
    if (!_matched) {
      if (Objects.equal(_operator_1, "less_than")) {
        _matched=true;
        String _out_3 = out;
        out = (_out_3 + " < ");
      }
    }
    if (!_matched) {
      if (Objects.equal(_operator_1, "equal_to")) {
        _matched=true;
        String _out_4 = out;
        out = (_out_4 + " == ");
      }
    }
    if (!_matched) {
      if (Objects.equal(_operator_1, "greater_than")) {
        _matched=true;
        String _out_5 = out;
        out = (_out_5 + " > ");
      }
    }
    if (!_matched) {
      if (Objects.equal(_operator_1, "not_equal_to")) {
        _matched=true;
        String _out_6 = out;
        out = (_out_6 + " != ");
      }
    }
    if (!_matched) {
      if (Objects.equal(_operator_1, "greater_than_or_equal_to")) {
        _matched=true;
        String _out_7 = out;
        out = (_out_7 + " >= ");
      }
    }
    if (!_matched) {
      if (Objects.equal(_operator_1, "less_than_or_equal_to")) {
        _matched=true;
        String _out_8 = out;
        out = (_out_8 + " <= ");
      }
    }
    Value _value_1 = p.getValue();
    boolean _notEquals = (!Objects.equal(_value_1, null));
    if (_notEquals) {
      String _out_9 = out;
      Value _value_2 = p.getValue();
      int _value_3 = _value_2.getValue();
      out = (_out_9 + Integer.valueOf(_value_3));
    }
    TimingConstraint _time = p.getTime();
    boolean _notEquals_1 = (!Objects.equal(_time, null));
    if (_notEquals_1) {
      String _out_10 = out;
      TimingConstraint _time_1 = p.getTime();
      Time _time_2 = _time_1.getTime();
      int _value_4 = _time_2.getValue();
      String _plus_4 = (Integer.valueOf(_value_4) + " ");
      TimingConstraint _time_3 = p.getTime();
      Time _time_4 = _time_3.getTime();
      String _timeUnit_1 = _time_4.getTimeUnit();
      String _plus_5 = (_plus_4 + _timeUnit_1);
      out = (_out_10 + _plus_5);
    }
    InputOutput.<String>println(("ConditionReturn: " + out));
    return out;
  }
  
  public String processPrefixEvent(final PrefixEvent p) {
    String out = "";
    String _out = out;
    String _prefixFixedSyntax = p.getPrefixFixedSyntax();
    out = (_out + _prefixFixedSyntax);
    EObject _event_expression = p.getEvent_expression();
    if ((_event_expression instanceof ParamEvent)) {
      EObject _event_expression_1 = p.getEvent_expression();
      final ParamEvent event = ((ParamEvent) _event_expression_1);
      EObject _parameter = event.getParameter();
      if ((_parameter instanceof Parameter)) {
        EObject _parameter_1 = event.getParameter();
        final Parameter parameter = ((Parameter) _parameter_1);
        String _out_1 = out;
        String _name = parameter.getName();
        String _plus = (" " + _name);
        out = (_out_1 + _plus);
      } else {
        EObject _parameter_2 = event.getParameter();
        if ((_parameter_2 instanceof Time)) {
          EObject _parameter_3 = event.getParameter();
          final Time time = ((Time) _parameter_3);
          String _out_2 = out;
          out = (_out_2 + " ");
          int _value = time.getValue();
          String _timeUnit = time.getTimeUnit();
          /* (Integer.valueOf(_value) + _timeUnit); */
        }
      }
      Value _value_1 = event.getValue();
      final Value value = ((Value) _value_1);
      String _out_3 = out;
      String _action = event.getAction();
      String _plus_1 = (" " + _action);
      String _plus_2 = (_plus_1 + " ");
      int _value_2 = value.getValue();
      String _plus_3 = (_plus_2 + Integer.valueOf(_value_2));
      out = (_out_3 + _plus_3);
    } else {
      EObject _event_expression_2 = p.getEvent_expression();
      if ((_event_expression_2 instanceof ActorEvent)) {
        EObject _event_expression_3 = p.getEvent_expression();
        final ActorEvent event_1 = ((ActorEvent) _event_expression_3);
        EObject _actor = event_1.getActor();
        if ((_actor instanceof org.language.reqLanguage.System)) {
          EObject _actor_1 = event_1.getActor();
          final org.language.reqLanguage.System actor = ((org.language.reqLanguage.System) _actor_1);
          String _out_4 = out;
          String _name_1 = actor.getName();
          String _plus_4 = (" " + _name_1);
          out = (_out_4 + _plus_4);
        } else {
          EObject _actor_2 = event_1.getActor();
          if ((_actor_2 instanceof User)) {
            EObject _actor_3 = event_1.getActor();
            final User actor_1 = ((User) _actor_3);
            String _out_5 = out;
            String _name_2 = actor_1.getName();
            String _plus_5 = (" " + _name_2);
            out = (_out_5 + _plus_5);
          }
        }
        Parameter _entity = event_1.getEntity();
        final Parameter parameter_1 = ((Parameter) _entity);
        String _out_6 = out;
        String _action_1 = event_1.getAction();
        String _plus_6 = (" " + _action_1);
        String _plus_7 = (_plus_6 + " ");
        out = (_out_6 + _plus_7);
        parameter_1.getName();
      } else {
        EObject _event_expression_4 = p.getEvent_expression();
        if ((_event_expression_4 instanceof StateEvent)) {
          EObject _event_expression_5 = p.getEvent_expression();
          final StateEvent event_2 = ((StateEvent) _event_expression_5);
          String _out_7 = out;
          org.language.reqLanguage.System _system = event_2.getSystem();
          String _name_3 = _system.getName();
          String _plus_8 = (" " + _name_3);
          String _plus_9 = (_plus_8 + " starts in state: ");
          out = (_out_7 + _plus_9);
          State _state = event_2.getState();
          _state.getName();
        }
      }
    }
    return out;
  }
  
  public CharSequence createClassDiagram(final Tree<String> tree) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@startuml");
    _builder.newLine();
    String _classMain = this.classMain(tree);
    _builder.append(_classMain, "");
    _builder.newLineIfNotEmpty();
    _builder.append("@enduml");
    _builder.newLine();
    return _builder;
  }
  
  public String classMain(final Tree<String> tree) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _size = tree.attributes.size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        _builder.append("class ");
        _builder.append(tree.data, "");
        _builder.append(" {");
        _builder.newLineIfNotEmpty();
        {
          for(final StringTuple attribute : tree.attributes) {
            _builder.append(attribute.type, "");
            _builder.append(" ");
            _builder.append(attribute.name, "");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          for(final StringTuple function : tree.functions) {
            _builder.append("\t");
            _builder.append(function.type, "\t");
            _builder.append(" ");
            _builder.append(function.name, "\t");
            _builder.append("()");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("}");
        _builder.newLine();
      }
    }
    {
      int _size_1 = tree.children.size();
      boolean _greaterThan_1 = (_size_1 > 0);
      if (_greaterThan_1) {
        {
          for(final Tree<String> child : tree.children) {
            {
              boolean _notEquals = (!Objects.equal(tree.data, "root"));
              if (_notEquals) {
                _builder.append(tree.data, "");
                _builder.append(" *-- ");
                _builder.append(child.data, "");
                _builder.newLineIfNotEmpty();
              }
            }
            String _xifexpression = null;
            boolean _notEquals_1 = (!Objects.equal(child.children, null));
            if (_notEquals_1) {
              _xifexpression = this.classMain(child);
            }
            _builder.append(_xifexpression, "");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public CharSequence createSequenceDiagram(final ArrayList<Sequence> array) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("@startuml");
    _builder.newLine();
    String _sequenceMain = this.sequenceMain(array);
    _builder.append(_sequenceMain, "");
    _builder.newLineIfNotEmpty();
    _builder.append("@enduml");
    _builder.newLine();
    return _builder;
  }
  
  public String sequenceMain(final ArrayList<Sequence> array) {
    StringConcatenation _builder = new StringConcatenation();
    {
      int _size = array.size();
      boolean _greaterThan = (_size > 0);
      if (_greaterThan) {
        {
          for(final Sequence sequence : array) {
            _builder.append(sequence.actor1, "");
            _builder.append(" -> ");
            _builder.append(sequence.actor2, "");
            _builder.append(": ");
            {
              boolean _equals = sequence.condition.equals("");
              boolean _not = (!_equals);
              if (_not) {
                _builder.append(sequence.condition, "");
              }
            }
            _builder.append(": ");
            _builder.append(sequence.action, "");
            _builder.append("(");
            {
              boolean _notEquals = (!Objects.equal(sequence.parameter, null));
              if (_notEquals) {
                _builder.append(sequence.parameter, "");
                _builder.append(": ");
              }
            }
            {
              if (sequence.hasValue) {
                _builder.append(sequence.value, "");
              }
            }
            _builder.append(")");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public CharSequence createUMLModel(final Tree<String> tree) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
    _builder.newLine();
    _builder.append("<uml:Model xmi:version=\"20131001\" xmlns:xmi=\"http://www.omg.org/spec/XMI/20131001\" xmlns:uml=\"http://www.eclipse.org/uml2/5.0.0/UML\" xmi:id=\"__test_xmi\" name=\"Model\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<packageImport xmi:type=\"uml:PackageImport\" xmi:id=\"__test_xmi\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<importedPackage xmi:type=\"uml:Model\" href=\"pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml#_0\"/>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</packageImport>");
    _builder.newLine();
    {
      for(final Tree<String> child : tree.children) {
        _builder.append("\t");
        String _processTreeXMI = this.processTreeXMI(child);
        _builder.append(_processTreeXMI, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</uml:Model>");
    _builder.newLine();
    return _builder;
  }
  
  public String processTreeXMI(final Tree<String> tree) {
    StringConcatenation _builder = new StringConcatenation();
    boolean _and = false;
    boolean _isEmpty = tree.attributes.isEmpty();
    if (!_isEmpty) {
      _and = false;
    } else {
      boolean _isEmpty_1 = tree.functions.isEmpty();
      _and = _isEmpty_1;
    }
    boolean empty = _and;
    _builder.newLineIfNotEmpty();
    _builder.append("<packagedElement xmi:type=\"uml:Class\" xmi:id=\"_");
    int _xmiId = this.getXmiId(tree.data);
    _builder.append(_xmiId, "");
    _builder.append("\" name=\"");
    _builder.append(tree.data, "");
    _builder.append("\"");
    {
      if (empty) {
        _builder.append("/");
      }
    }
    _builder.append(">");
    _builder.newLineIfNotEmpty();
    {
      for(final StringTuple attribute : tree.attributes) {
        _builder.append("\t");
        _builder.append("<ownedAttribute xmi:type=\"uml:Property\" xmi:id=\"_att");
        int _xmiId_1 = this.getXmiId((attribute.type + attribute.name));
        _builder.append(_xmiId_1, "\t");
        _builder.append("\" name=\"");
        _builder.append(attribute.name, "\t");
        _builder.append("\"/>");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      for(final StringTuple function : tree.functions) {
        _builder.append("\t");
        _builder.append("<ownedOperation xmi:type=\"uml:Operation\" xmi:id=\"_op");
        int _xmiId_2 = this.getXmiId((function.type + function.name));
        _builder.append(_xmiId_2, "\t");
        _builder.append("\" name=\"");
        _builder.append(function.name, "\t");
        _builder.append("\"/>");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      if ((!empty)) {
        _builder.append("</packagedElement>");
      }
    }
    _builder.newLineIfNotEmpty();
    {
      for(final Tree<String> child : tree.children) {
        String _processTreeXMI = this.processTreeXMI(child);
        _builder.append(_processTreeXMI, "");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      for(final Tree<String> child_1 : tree.children) {
        _builder.append("<packagedElement xmi:type=\"uml:Dependency\" xmi:id=\"_dep");
        int _xmiId_3 = this.getXmiId(child_1.data);
        _builder.append(_xmiId_3, "");
        _builder.append("\" client=\"_");
        int _xmiId_4 = this.getXmiId(child_1.data);
        _builder.append(_xmiId_4, "");
        _builder.append("\" supplier=\"_");
        int _xmiId_5 = this.getXmiId(tree.data);
        _builder.append(_xmiId_5, "");
        _builder.append("\"/>");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
}
