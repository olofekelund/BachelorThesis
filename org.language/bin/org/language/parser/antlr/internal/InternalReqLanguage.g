/*
* generated by Xtext
*/
grammar InternalReqLanguage;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.language.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.language.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.language.services.ReqLanguageGrammarAccess;

}

@parser::members {

 	private ReqLanguageGrammarAccess grammarAccess;
 	
    public InternalReqLanguageParser(TokenStream input, ReqLanguageGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected ReqLanguageGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getRequirementsRequirementParserRuleCall_0()); 
	    }
		lv_requirements_0_0=ruleRequirement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"requirements",
        		lv_requirements_0_0, 
        		"Requirement");
	        afterParserOrEnumRuleCall();
	    }

)
)*
;





// Entry rule entryRuleRequirement
entryRuleRequirement returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getRequirementRule()); }
	 iv_ruleRequirement=ruleRequirement 
	 { $current=$iv_ruleRequirement.current; } 
	 EOF 
;

// Rule Requirement
ruleRequirement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRequirementAccess().getReqIDReqIDParserRuleCall_0_0()); 
	    }
		lv_reqID_0_0=ruleReqID		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequirementRule());
	        }
       		set(
       			$current, 
       			"reqID",
        		lv_reqID_0_0, 
        		"ReqID");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRequirementAccess().getPrefixPrefixParserRuleCall_1_0()); 
	    }
		lv_prefix_1_0=rulePrefix		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequirementRule());
	        }
       		set(
       			$current, 
       			"prefix",
        		lv_prefix_1_0, 
        		"Prefix");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
(
		{ 
	        newCompositeNode(grammarAccess.getRequirementAccess().getMainRequirementMainFunctionParserRuleCall_2_0_0()); 
	    }
		lv_mainRequirement_2_1=ruleMainFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequirementRule());
	        }
       		set(
       			$current, 
       			"mainRequirement",
        		lv_mainRequirement_2_1, 
        		"MainFunction");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRequirementAccess().getMainRequirementMainCompositionParserRuleCall_2_0_1()); 
	    }
		lv_mainRequirement_2_2=ruleMainComposition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequirementRule());
	        }
       		set(
       			$current, 
       			"mainRequirement",
        		lv_mainRequirement_2_2, 
        		"MainComposition");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRequirementAccess().getMainRequirementMainStateTransitionParserRuleCall_2_0_2()); 
	    }
		lv_mainRequirement_2_3=ruleMainStateTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequirementRule());
	        }
       		set(
       			$current, 
       			"mainRequirement",
        		lv_mainRequirement_2_3, 
        		"MainStateTransition");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRequirementAccess().getMainRequirementMainAttributesParserRuleCall_2_0_3()); 
	    }
		lv_mainRequirement_2_4=ruleMainAttributes		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequirementRule());
	        }
       		set(
       			$current, 
       			"mainRequirement",
        		lv_mainRequirement_2_4, 
        		"MainAttributes");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getRequirementAccess().getMainRequirementMainFunctionsParserRuleCall_2_0_4()); 
	    }
		lv_mainRequirement_2_5=ruleMainFunctions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRequirementRule());
	        }
       		set(
       			$current, 
       			"mainRequirement",
        		lv_mainRequirement_2_5, 
        		"MainFunctions");
	        afterParserOrEnumRuleCall();
	    }

)

)
)	otherlv_3='.' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getRequirementAccess().getFullStopKeyword_3());
    }
)
;





// Entry rule entryRuleReqID
entryRuleReqID returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getReqIDRule()); }
	 iv_ruleReqID=ruleReqID 
	 { $current=$iv_ruleReqID.current; } 
	 EOF 
;

// Rule ReqID
ruleReqID returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_reqID_0_0=	'ID:' 
    {
        newLeafNode(lv_reqID_0_0, grammarAccess.getReqIDAccess().getReqIDIDKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReqIDRule());
	        }
       		setWithLastConsumed($current, "reqID", lv_reqID_0_0, "ID:");
	    }

)
)(
(
		lv_name_1_0=RULE_STRING
		{
			newLeafNode(lv_name_1_0, grammarAccess.getReqIDAccess().getNameSTRINGTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getReqIDRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"STRING");
	    }

)
))
;





// Entry rule entryRulePrefix
entryRulePrefix returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixRule()); }
	 iv_rulePrefix=rulePrefix 
	 { $current=$iv_rulePrefix.current; } 
	 EOF 
;

// Rule Prefix
rulePrefix returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixAccess().getLeftOperandPrefixConditionParserRuleCall_0_0_0()); 
	    }
		lv_leftOperand_0_1=rulePrefixCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixRule());
	        }
       		set(
       			$current, 
       			"leftOperand",
        		lv_leftOperand_0_1, 
        		"PrefixCondition");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getPrefixAccess().getLeftOperandPrefixStateParserRuleCall_0_0_1()); 
	    }
		lv_leftOperand_0_2=rulePrefixState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixRule());
	        }
       		set(
       			$current, 
       			"leftOperand",
        		lv_leftOperand_0_2, 
        		"PrefixState");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getPrefixAccess().getLeftOperandPrefixEventParserRuleCall_0_0_2()); 
	    }
		lv_leftOperand_0_3=rulePrefixEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixRule());
	        }
       		set(
       			$current, 
       			"leftOperand",
        		lv_leftOperand_0_3, 
        		"PrefixEvent");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixAccess().getPrefixListPrefixRightOperandParserRuleCall_1_0()); 
	    }
		lv_prefixList_1_0=rulePrefixRightOperand		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixRule());
	        }
       		add(
       			$current, 
       			"prefixList",
        		lv_prefixList_1_0, 
        		"PrefixRightOperand");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRulePrefixRightOperand
entryRulePrefixRightOperand returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixRightOperandRule()); }
	 iv_rulePrefixRightOperand=rulePrefixRightOperand 
	 { $current=$iv_rulePrefixRightOperand.current; } 
	 EOF 
;

// Rule PrefixRightOperand
rulePrefixRightOperand returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_operator_0_1=	'and' 
    {
        newLeafNode(lv_operator_0_1, grammarAccess.getPrefixRightOperandAccess().getOperatorAndKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrefixRightOperandRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_1, null);
	    }

    |		lv_operator_0_2=	'or' 
    {
        newLeafNode(lv_operator_0_2, grammarAccess.getPrefixRightOperandAccess().getOperatorOrKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPrefixRightOperandRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_2, null);
	    }

)

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixRightOperandAccess().getPrefixRightOperandPrefixConditionParserRuleCall_1_0_0()); 
	    }
		lv_prefixRightOperand_1_1=rulePrefixCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixRightOperandRule());
	        }
       		set(
       			$current, 
       			"prefixRightOperand",
        		lv_prefixRightOperand_1_1, 
        		"PrefixCondition");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getPrefixRightOperandAccess().getPrefixRightOperandPrefixStateParserRuleCall_1_0_1()); 
	    }
		lv_prefixRightOperand_1_2=rulePrefixState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixRightOperandRule());
	        }
       		set(
       			$current, 
       			"prefixRightOperand",
        		lv_prefixRightOperand_1_2, 
        		"PrefixState");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getPrefixRightOperandAccess().getPrefixRightOperandPrefixEventParserRuleCall_1_0_2()); 
	    }
		lv_prefixRightOperand_1_3=rulePrefixEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixRightOperandRule());
	        }
       		set(
       			$current, 
       			"prefixRightOperand",
        		lv_prefixRightOperand_1_3, 
        		"PrefixEvent");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRulePrefixState
entryRulePrefixState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixStateRule()); }
	 iv_rulePrefixState=rulePrefixState 
	 { $current=$iv_rulePrefixState.current; } 
	 EOF 
;

// Rule PrefixState
rulePrefixState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixStateAccess().getPrefixFixedSyntaxPrefixFixedSyntaxParserRuleCall_0_0()); 
	    }
		lv_prefixFixedSyntax_0_0=rulePrefixFixedSyntax		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixStateRule());
	        }
       		set(
       			$current, 
       			"prefixFixedSyntax",
        		lv_prefixFixedSyntax_0_0, 
        		"PrefixFixedSyntax");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixStateAccess().getStateExpressionStateParserRuleCall_1_0_0()); 
	    }
		lv_stateExpression_1_1=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixStateRule());
	        }
       		set(
       			$current, 
       			"stateExpression",
        		lv_stateExpression_1_1, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getPrefixStateAccess().getStateExpressionParameterStateParserRuleCall_1_0_1()); 
	    }
		lv_stateExpression_1_2=ruleParameterState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixStateRule());
	        }
       		set(
       			$current, 
       			"stateExpression",
        		lv_stateExpression_1_2, 
        		"ParameterState");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRulePrefixCondition
entryRulePrefixCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixConditionRule()); }
	 iv_rulePrefixCondition=rulePrefixCondition 
	 { $current=$iv_rulePrefixCondition.current; } 
	 EOF 
;

// Rule PrefixCondition
rulePrefixCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixConditionAccess().getPrefixFixedSyntaxPrefixFixedSyntaxParserRuleCall_0_0()); 
	    }
		lv_prefixFixedSyntax_0_0=rulePrefixFixedSyntax		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixConditionRule());
	        }
       		set(
       			$current, 
       			"prefixFixedSyntax",
        		lv_prefixFixedSyntax_0_0, 
        		"PrefixFixedSyntax");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixConditionAccess().getParameterTimeParserRuleCall_1_0_0()); 
	    }
		lv_parameter_1_1=ruleTime		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixConditionRule());
	        }
       		set(
       			$current, 
       			"parameter",
        		lv_parameter_1_1, 
        		"Time");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getPrefixConditionAccess().getParameterParameterParserRuleCall_1_0_1()); 
	    }
		lv_parameter_1_2=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixConditionRule());
	        }
       		set(
       			$current, 
       			"parameter",
        		lv_parameter_1_2, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(	otherlv_2='is' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrefixConditionAccess().getIsKeyword_2_0());
    }

    |	otherlv_3='has' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPrefixConditionAccess().getHasKeyword_2_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixConditionAccess().getOperatorOperatorParserRuleCall_3_0()); 
	    }
		lv_operator_4_0=ruleOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixConditionRule());
	        }
       		set(
       			$current, 
       			"operator",
        		lv_operator_4_0, 
        		"Operator");
	        afterParserOrEnumRuleCall();
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixConditionAccess().getValueValueParserRuleCall_4_0_0()); 
	    }
		lv_value_5_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixConditionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_5_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixConditionAccess().getTimeTimingConstraintParserRuleCall_4_1_0()); 
	    }
		lv_time_6_0=ruleTimingConstraint		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixConditionRule());
	        }
       		set(
       			$current, 
       			"time",
        		lv_time_6_0, 
        		"TimingConstraint");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRulePrefixEvent
entryRulePrefixEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixEventRule()); }
	 iv_rulePrefixEvent=rulePrefixEvent 
	 { $current=$iv_rulePrefixEvent.current; } 
	 EOF 
;

// Rule PrefixEvent
rulePrefixEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixEventAccess().getPrefixFixedSyntaxPrefixFixedSyntaxParserRuleCall_0_0()); 
	    }
		lv_prefixFixedSyntax_0_0=rulePrefixFixedSyntax		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixEventRule());
	        }
       		set(
       			$current, 
       			"prefixFixedSyntax",
        		lv_prefixFixedSyntax_0_0, 
        		"PrefixFixedSyntax");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getPrefixEventAccess().getEvent_expressionParamEventParserRuleCall_1_0_0()); 
	    }
		lv_event_expression_1_1=ruleParamEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixEventRule());
	        }
       		set(
       			$current, 
       			"event_expression",
        		lv_event_expression_1_1, 
        		"ParamEvent");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getPrefixEventAccess().getEvent_expressionActorEventParserRuleCall_1_0_1()); 
	    }
		lv_event_expression_1_2=ruleActorEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixEventRule());
	        }
       		set(
       			$current, 
       			"event_expression",
        		lv_event_expression_1_2, 
        		"ActorEvent");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getPrefixEventAccess().getEvent_expressionStateEventParserRuleCall_1_0_2()); 
	    }
		lv_event_expression_1_3=ruleStateEvent		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPrefixEventRule());
	        }
       		set(
       			$current, 
       			"event_expression",
        		lv_event_expression_1_3, 
        		"StateEvent");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRulePrefixFixedSyntax
entryRulePrefixFixedSyntax returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getPrefixFixedSyntaxRule()); } 
	 iv_rulePrefixFixedSyntax=rulePrefixFixedSyntax 
	 { $current=$iv_rulePrefixFixedSyntax.current.getText(); }  
	 EOF 
;

// Rule PrefixFixedSyntax
rulePrefixFixedSyntax returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='While' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrefixFixedSyntaxAccess().getWhileKeyword_0()); 
    }

    |
	kw='If' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrefixFixedSyntaxAccess().getIfKeyword_1()); 
    }

    |(
	kw='As' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrefixFixedSyntaxAccess().getAsKeyword_2_0()); 
    }

	kw='soon' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrefixFixedSyntaxAccess().getSoonKeyword_2_1()); 
    }

	kw='as' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrefixFixedSyntaxAccess().getAsKeyword_2_2()); 
    }
)
    |
	kw='while' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrefixFixedSyntaxAccess().getWhileKeyword_3()); 
    }

    |
	kw='if' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrefixFixedSyntaxAccess().getIfKeyword_4()); 
    }

    |(
	kw='as' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrefixFixedSyntaxAccess().getAsKeyword_5_0()); 
    }

	kw='soon' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrefixFixedSyntaxAccess().getSoonKeyword_5_1()); 
    }

	kw='as' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPrefixFixedSyntaxAccess().getAsKeyword_5_2()); 
    }
))
    ;





// Entry rule entryRuleParamEvent
entryRuleParamEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParamEventRule()); }
	 iv_ruleParamEvent=ruleParamEvent 
	 { $current=$iv_ruleParamEvent.current; } 
	 EOF 
;

// Rule ParamEvent
ruleParamEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getParamEventAccess().getParameterTimeParserRuleCall_0_0_0()); 
	    }
		lv_parameter_0_1=ruleTime		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamEventRule());
	        }
       		set(
       			$current, 
       			"parameter",
        		lv_parameter_0_1, 
        		"Time");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getParamEventAccess().getParameterParameterParserRuleCall_0_0_1()); 
	    }
		lv_parameter_0_2=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamEventRule());
	        }
       		set(
       			$current, 
       			"parameter",
        		lv_parameter_0_2, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
(
		lv_action_1_1=	'increases above' 
    {
        newLeafNode(lv_action_1_1, grammarAccess.getParamEventAccess().getActionIncreasesAboveKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamEventRule());
	        }
       		setWithLastConsumed($current, "action", lv_action_1_1, null);
	    }

    |		lv_action_1_2=	'decreases below' 
    {
        newLeafNode(lv_action_1_2, grammarAccess.getParamEventAccess().getActionDecreasesBelowKeyword_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamEventRule());
	        }
       		setWithLastConsumed($current, "action", lv_action_1_2, null);
	    }

    |		lv_action_1_3=	'reaches' 
    {
        newLeafNode(lv_action_1_3, grammarAccess.getParamEventAccess().getActionReachesKeyword_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParamEventRule());
	        }
       		setWithLastConsumed($current, "action", lv_action_1_3, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getParamEventAccess().getValueValueParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParamEventRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleActorEvent
entryRuleActorEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActorEventRule()); }
	 iv_ruleActorEvent=ruleActorEvent 
	 { $current=$iv_ruleActorEvent.current; } 
	 EOF 
;

// Rule ActorEvent
ruleActorEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		{ 
	        newCompositeNode(grammarAccess.getActorEventAccess().getActorSystemParserRuleCall_0_0_0()); 
	    }
		lv_actor_0_1=ruleSystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActorEventRule());
	        }
       		set(
       			$current, 
       			"actor",
        		lv_actor_0_1, 
        		"System");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getActorEventAccess().getActorUserParserRuleCall_0_0_1()); 
	    }
		lv_actor_0_2=ruleUser		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActorEventRule());
	        }
       		set(
       			$current, 
       			"actor",
        		lv_actor_0_2, 
        		"User");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(
(
(
		lv_action_1_1=	'activates' 
    {
        newLeafNode(lv_action_1_1, grammarAccess.getActorEventAccess().getActionActivatesKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActorEventRule());
	        }
       		setWithLastConsumed($current, "action", lv_action_1_1, null);
	    }

    |		lv_action_1_2=	'deactivates' 
    {
        newLeafNode(lv_action_1_2, grammarAccess.getActorEventAccess().getActionDeactivatesKeyword_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActorEventRule());
	        }
       		setWithLastConsumed($current, "action", lv_action_1_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getActorEventAccess().getEntityParameterParserRuleCall_2_0()); 
	    }
		lv_entity_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActorEventRule());
	        }
       		set(
       			$current, 
       			"entity",
        		lv_entity_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleStateEvent
entryRuleStateEvent returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateEventRule()); }
	 iv_ruleStateEvent=ruleStateEvent 
	 { $current=$iv_ruleStateEvent.current; } 
	 EOF 
;

// Rule StateEvent
ruleStateEvent returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getStateEventAccess().getSystemSystemParserRuleCall_0_0()); 
	    }
		lv_system_0_0=ruleSystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateEventRule());
	        }
       		set(
       			$current, 
       			"system",
        		lv_system_0_0, 
        		"System");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_1='starts' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getStateEventAccess().getStartsKeyword_1());
    }
(	otherlv_2='in' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStateEventAccess().getInKeyword_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getStateEventAccess().getStateStateParserRuleCall_3_0()); 
	    }
		lv_state_3_0=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStateEventRule());
	        }
       		set(
       			$current, 
       			"state",
        		lv_state_3_0, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleParameterState
entryRuleParameterState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterStateRule()); }
	 iv_ruleParameterState=ruleParameterState 
	 { $current=$iv_ruleParameterState.current; } 
	 EOF 
;

// Rule ParameterState
ruleParameterState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getParameterStateAccess().getParameterParameterParserRuleCall_0_0()); 
	    }
		lv_parameter_0_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterStateRule());
	        }
       		set(
       			$current, 
       			"parameter",
        		lv_parameter_0_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_1='is' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getParameterStateAccess().getIsKeyword_1());
    }
)?(
(
(
		{ 
	        newCompositeNode(grammarAccess.getParameterStateAccess().getParameter_valueValueParserRuleCall_2_0_0()); 
	    }
		lv_parameter_value_2_1=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterStateRule());
	        }
       		set(
       			$current, 
       			"parameter_value",
        		lv_parameter_value_2_1, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getParameterStateAccess().getParameter_valueStateParserRuleCall_2_0_1()); 
	    }
		lv_parameter_value_2_2=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParameterStateRule());
	        }
       		set(
       			$current, 
       			"parameter_value",
        		lv_parameter_value_2_2, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

)

)
)?)
;





// Entry rule entryRuleMainFunction
entryRuleMainFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMainFunctionRule()); }
	 iv_ruleMainFunction=ruleMainFunction 
	 { $current=$iv_ruleMainFunction.current; } 
	 EOF 
;

// Rule MainFunction
ruleMainFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='The' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMainFunctionAccess().getTheKeyword_0_0());
    }

    |	otherlv_1='the' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMainFunctionAccess().getTheKeyword_0_1());
    }
)(
(
(
		{ 
	        newCompositeNode(grammarAccess.getMainFunctionAccess().getSystemSystemParserRuleCall_1_0_0()); 
	    }
		lv_system_2_1=ruleSystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainFunctionRule());
	        }
       		set(
       			$current, 
       			"system",
        		lv_system_2_1, 
        		"System");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getMainFunctionAccess().getSystemActorParserRuleCall_1_0_1()); 
	    }
		lv_system_2_2=ruleActor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainFunctionRule());
	        }
       		set(
       			$current, 
       			"system",
        		lv_system_2_2, 
        		"Actor");
	        afterParserOrEnumRuleCall();
	    }

)

)
)	otherlv_3='shall' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMainFunctionAccess().getShallKeyword_2());
    }
(	otherlv_4='not' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMainFunctionAccess().getNotKeyword_3());
    }
)?(	otherlv_5='be' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMainFunctionAccess().getBeKeyword_4_0());
    }
	otherlv_6='able' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMainFunctionAccess().getAbleKeyword_4_1());
    }
	otherlv_7='to' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMainFunctionAccess().getToKeyword_4_2());
    }
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getMainFunctionAccess().getFunctionActionParserRuleCall_5_0()); 
	    }
		lv_function_8_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainFunctionRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_8_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleMainComposition
entryRuleMainComposition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMainCompositionRule()); }
	 iv_ruleMainComposition=ruleMainComposition 
	 { $current=$iv_ruleMainComposition.current; } 
	 EOF 
;

// Rule MainComposition
ruleMainComposition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='The' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMainCompositionAccess().getTheKeyword_0_0());
    }

    |	otherlv_1='the' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMainCompositionAccess().getTheKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMainCompositionAccess().getSystemSystemParserRuleCall_1_0()); 
	    }
		lv_system_2_0=ruleSystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainCompositionRule());
	        }
       		set(
       			$current, 
       			"system",
        		lv_system_2_0, 
        		"System");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='shall' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMainCompositionAccess().getShallKeyword_2());
    }
	otherlv_4='consist' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMainCompositionAccess().getConsistKeyword_3());
    }
	otherlv_5='of' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMainCompositionAccess().getOfKeyword_4());
    }
	otherlv_6='the' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMainCompositionAccess().getTheKeyword_5());
    }
	otherlv_7='subsystems' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getMainCompositionAccess().getSubsystemsKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMainCompositionAccess().getSubsystemListSystemParserRuleCall_7_0()); 
	    }
		lv_subsystemList_8_0=ruleSystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainCompositionRule());
	        }
       		add(
       			$current, 
       			"subsystemList",
        		lv_subsystemList_8_0, 
        		"System");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getMainCompositionAccess().getCommaKeyword_8_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMainCompositionAccess().getSubsystemListSystemParserRuleCall_8_1_0()); 
	    }
		lv_subsystemList_10_0=ruleSystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainCompositionRule());
	        }
       		add(
       			$current, 
       			"subsystemList",
        		lv_subsystemList_10_0, 
        		"System");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMainStateTransition
entryRuleMainStateTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMainStateTransitionRule()); }
	 iv_ruleMainStateTransition=ruleMainStateTransition 
	 { $current=$iv_ruleMainStateTransition.current; } 
	 EOF 
;

// Rule MainStateTransition
ruleMainStateTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='The' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMainStateTransitionAccess().getTheKeyword_0_0());
    }

    |	otherlv_1='the' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMainStateTransitionAccess().getTheKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMainStateTransitionAccess().getSystemSystemParserRuleCall_1_0()); 
	    }
		lv_system_2_0=ruleSystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainStateTransitionRule());
	        }
       		set(
       			$current, 
       			"system",
        		lv_system_2_0, 
        		"System");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='shall' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMainStateTransitionAccess().getShallKeyword_2());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getMainStateTransitionAccess().getTransitionTransitionParserRuleCall_3_0_0()); 
	    }
		lv_transition_4_1=ruleTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainStateTransitionRule());
	        }
       		set(
       			$current, 
       			"transition",
        		lv_transition_4_1, 
        		"Transition");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getMainStateTransitionAccess().getTransitionOutTransitionParserRuleCall_3_0_1()); 
	    }
		lv_transition_4_2=ruleOutTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainStateTransitionRule());
	        }
       		set(
       			$current, 
       			"transition",
        		lv_transition_4_2, 
        		"OutTransition");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getMainStateTransitionAccess().getTransitionNoTransitionParserRuleCall_3_0_2()); 
	    }
		lv_transition_4_3=ruleNoTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainStateTransitionRule());
	        }
       		set(
       			$current, 
       			"transition",
        		lv_transition_4_3, 
        		"NoTransition");
	        afterParserOrEnumRuleCall();
	    }

)

)
)(	otherlv_5='and' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMainStateTransitionAccess().getAndKeyword_4_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMainStateTransitionAccess().getFunctionActionParserRuleCall_4_1_0()); 
	    }
		lv_function_6_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainStateTransitionRule());
	        }
       		set(
       			$current, 
       			"function",
        		lv_function_6_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleMainAttributes
entryRuleMainAttributes returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMainAttributesRule()); }
	 iv_ruleMainAttributes=ruleMainAttributes 
	 { $current=$iv_ruleMainAttributes.current; } 
	 EOF 
;

// Rule MainAttributes
ruleMainAttributes returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='The' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMainAttributesAccess().getTheKeyword_0_0());
    }

    |	otherlv_1='the' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMainAttributesAccess().getTheKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMainAttributesAccess().getSystemSystemParserRuleCall_1_0()); 
	    }
		lv_system_2_0=ruleSystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainAttributesRule());
	        }
       		set(
       			$current, 
       			"system",
        		lv_system_2_0, 
        		"System");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='shall' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMainAttributesAccess().getShallKeyword_2());
    }
	otherlv_4='have' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMainAttributesAccess().getHaveKeyword_3());
    }
	otherlv_5='the' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMainAttributesAccess().getTheKeyword_4());
    }
	otherlv_6='attributes' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMainAttributesAccess().getAttributesKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMainAttributesAccess().getAttributeListAttributeParserRuleCall_6_0()); 
	    }
		lv_attributeList_7_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainAttributesRule());
	        }
       		add(
       			$current, 
       			"attributeList",
        		lv_attributeList_7_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMainAttributesAccess().getCommaKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMainAttributesAccess().getAttributeListAttributeParserRuleCall_7_1_0()); 
	    }
		lv_attributeList_9_0=ruleAttribute		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainAttributesRule());
	        }
       		add(
       			$current, 
       			"attributeList",
        		lv_attributeList_9_0, 
        		"Attribute");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleMainFunctions
entryRuleMainFunctions returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getMainFunctionsRule()); }
	 iv_ruleMainFunctions=ruleMainFunctions 
	 { $current=$iv_ruleMainFunctions.current; } 
	 EOF 
;

// Rule MainFunctions
ruleMainFunctions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((	otherlv_0='The' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getMainFunctionsAccess().getTheKeyword_0_0());
    }

    |	otherlv_1='the' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getMainFunctionsAccess().getTheKeyword_0_1());
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getMainFunctionsAccess().getSystemSystemParserRuleCall_1_0()); 
	    }
		lv_system_2_0=ruleSystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainFunctionsRule());
	        }
       		set(
       			$current, 
       			"system",
        		lv_system_2_0, 
        		"System");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3='shall' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getMainFunctionsAccess().getShallKeyword_2());
    }
	otherlv_4='have' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getMainFunctionsAccess().getHaveKeyword_3());
    }
	otherlv_5='the' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getMainFunctionsAccess().getTheKeyword_4());
    }
	otherlv_6='functions' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getMainFunctionsAccess().getFunctionsKeyword_5());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMainFunctionsAccess().getFunctionListFunctionParserRuleCall_6_0()); 
	    }
		lv_functionList_7_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainFunctionsRule());
	        }
       		add(
       			$current, 
       			"functionList",
        		lv_functionList_7_0, 
        		"Function");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_8=',' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getMainFunctionsAccess().getCommaKeyword_7_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getMainFunctionsAccess().getFunctionListFunctionParserRuleCall_7_1_0()); 
	    }
		lv_functionList_9_0=ruleFunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getMainFunctionsRule());
	        }
       		add(
       			$current, 
       			"functionList",
        		lv_functionList_9_0, 
        		"Function");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleOperator
entryRuleOperator returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	 iv_ruleOperator=ruleOperator 
	 { $current=$iv_ruleOperator.current; } 
	 EOF 
;

// Rule Operator
ruleOperator returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
(
		lv_operator_0_1=	'less_than' 
    {
        newLeafNode(lv_operator_0_1, grammarAccess.getOperatorAccess().getOperatorLess_thanKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_1, null);
	    }

    |		lv_operator_0_2=	'equal_to' 
    {
        newLeafNode(lv_operator_0_2, grammarAccess.getOperatorAccess().getOperatorEqual_toKeyword_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_2, null);
	    }

    |		lv_operator_0_3=	'greater_than' 
    {
        newLeafNode(lv_operator_0_3, grammarAccess.getOperatorAccess().getOperatorGreater_thanKeyword_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_3, null);
	    }

    |		lv_operator_0_4=	'not_equal_to' 
    {
        newLeafNode(lv_operator_0_4, grammarAccess.getOperatorAccess().getOperatorNot_equal_toKeyword_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_4, null);
	    }

    |		lv_operator_0_5=	'greater_than_or_equal_to' 
    {
        newLeafNode(lv_operator_0_5, grammarAccess.getOperatorAccess().getOperatorGreater_than_or_equal_toKeyword_0_4());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_5, null);
	    }

    |		lv_operator_0_6=	'less_than_or_equal_to' 
    {
        newLeafNode(lv_operator_0_6, grammarAccess.getOperatorAccess().getOperatorLess_than_or_equal_toKeyword_0_5());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getOperatorRule());
	        }
       		setWithLastConsumed($current, "operator", lv_operator_0_6, null);
	    }

)

)
)
;





// Entry rule entryRuleTransition
entryRuleTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTransitionRule()); }
	 iv_ruleTransition=ruleTransition 
	 { $current=$iv_ruleTransition.current; } 
	 EOF 
;

// Rule Transition
ruleTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='go' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTransitionAccess().getGoKeyword_0());
    }
(	otherlv_1='from' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getTransitionAccess().getFromKeyword_1_0());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getSource_stateStateParserRuleCall_1_1_0_0()); 
	    }
		lv_source_state_2_1=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"source_state",
        		lv_source_state_2_1, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getSource_stateParameterStateParserRuleCall_1_1_0_1()); 
	    }
		lv_source_state_2_2=ruleParameterState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"source_state",
        		lv_source_state_2_2, 
        		"ParameterState");
	        afterParserOrEnumRuleCall();
	    }

)

)
))?	otherlv_3='to' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTransitionAccess().getToKeyword_2());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getTarget_stateStateParserRuleCall_3_0_0()); 
	    }
		lv_target_state_4_1=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"target_state",
        		lv_target_state_4_1, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getTransitionAccess().getTarget_stateParameterStateParserRuleCall_3_0_1()); 
	    }
		lv_target_state_4_2=ruleParameterState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTransitionRule());
	        }
       		set(
       			$current, 
       			"target_state",
        		lv_target_state_4_2, 
        		"ParameterState");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleOutTransition
entryRuleOutTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getOutTransitionRule()); }
	 iv_ruleOutTransition=ruleOutTransition 
	 { $current=$iv_ruleOutTransition.current; } 
	 EOF 
;

// Rule OutTransition
ruleOutTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='leave' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getOutTransitionAccess().getLeaveKeyword_0());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getOutTransitionAccess().getSource_stateStateParserRuleCall_1_0_0()); 
	    }
		lv_source_state_1_1=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutTransitionRule());
	        }
       		set(
       			$current, 
       			"source_state",
        		lv_source_state_1_1, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getOutTransitionAccess().getSource_stateParameterStateParserRuleCall_1_0_1()); 
	    }
		lv_source_state_1_2=ruleParameterState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOutTransitionRule());
	        }
       		set(
       			$current, 
       			"source_state",
        		lv_source_state_1_2, 
        		"ParameterState");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleNoTransition
entryRuleNoTransition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getNoTransitionRule()); }
	 iv_ruleNoTransition=ruleNoTransition 
	 { $current=$iv_ruleNoTransition.current; } 
	 EOF 
;

// Rule NoTransition
ruleNoTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='remain_in' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getNoTransitionAccess().getRemain_inKeyword_0());
    }
(
(
(
		{ 
	        newCompositeNode(grammarAccess.getNoTransitionAccess().getStateStateParserRuleCall_1_0_0()); 
	    }
		lv_state_1_1=ruleState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNoTransitionRule());
	        }
       		set(
       			$current, 
       			"state",
        		lv_state_1_1, 
        		"State");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getNoTransitionAccess().getStateParameterStateParserRuleCall_1_0_1()); 
	    }
		lv_state_1_2=ruleParameterState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNoTransitionRule());
	        }
       		set(
       			$current, 
       			"state",
        		lv_state_1_2, 
        		"ParameterState");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleSystem
entryRuleSystem returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getSystemRule()); }
	 iv_ruleSystem=ruleSystem 
	 { $current=$iv_ruleSystem.current; } 
	 EOF 
;

// Rule System
ruleSystem returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_system_0_0=	'system:' 
    {
        newLeafNode(lv_system_0_0, grammarAccess.getSystemAccess().getSystemSystemKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSystemRule());
	        }
       		setWithLastConsumed($current, "system", lv_system_0_0, "system:");
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getSystemAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getSystemRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleActor
entryRuleActor returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActorRule()); }
	 iv_ruleActor=ruleActor 
	 { $current=$iv_ruleActor.current; } 
	 EOF 
;

// Rule Actor
ruleActor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_actor_0_0=	'actor:' 
    {
        newLeafNode(lv_actor_0_0, grammarAccess.getActorAccess().getActorActorKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActorRule());
	        }
       		setWithLastConsumed($current, "actor", lv_actor_0_0, "actor:");
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getActorAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActorRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleUser
entryRuleUser returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getUserRule()); }
	 iv_ruleUser=ruleUser 
	 { $current=$iv_ruleUser.current; } 
	 EOF 
;

// Rule User
ruleUser returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_user_0_0=	'user:' 
    {
        newLeafNode(lv_user_0_0, grammarAccess.getUserAccess().getUserUserKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUserRule());
	        }
       		setWithLastConsumed($current, "user", lv_user_0_0, "user:");
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getUserAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getUserRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_action_0_0=	'action:' 
    {
        newLeafNode(lv_action_0_0, grammarAccess.getActionAccess().getActionActionKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed($current, "action", lv_action_0_0, "action:");
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getActionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getParameterParameterParserRuleCall_2_0_0()); 
	    }
		lv_parameter_2_0=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"parameter",
        		lv_parameter_2_0, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getValueValueParserRuleCall_2_1_0()); 
	    }
		lv_value_3_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)?)?(	otherlv_4='to' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getActionAccess().getToKeyword_3_0());
    }

    |	otherlv_5='from' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getActionAccess().getFromKeyword_3_1());
    }

    |	otherlv_6='the' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getActionAccess().getTheKeyword_3_2());
    }

    |	otherlv_7='on' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getActionAccess().getOnKeyword_3_3());
    }
)?(
(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getSubjectSystemParserRuleCall_4_0_0()); 
	    }
		lv_subject_8_1=ruleSystem		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"subject",
        		lv_subject_8_1, 
        		"System");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getSubjectActorParserRuleCall_4_0_1()); 
	    }
		lv_subject_8_2=ruleActor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"subject",
        		lv_subject_8_2, 
        		"Actor");
	        afterParserOrEnumRuleCall();
	    }

    |		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getSubjectParameterParserRuleCall_4_0_2()); 
	    }
		lv_subject_8_3=ruleParameter		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"subject",
        		lv_subject_8_3, 
        		"Parameter");
	        afterParserOrEnumRuleCall();
	    }

)

)
))
;





// Entry rule entryRuleState
entryRuleState returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getStateRule()); }
	 iv_ruleState=ruleState 
	 { $current=$iv_ruleState.current; } 
	 EOF 
;

// Rule State
ruleState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_state_0_0=	'state:' 
    {
        newLeafNode(lv_state_0_0, grammarAccess.getStateAccess().getStateStateKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed($current, "state", lv_state_0_0, "state:");
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getStateAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleAttribute
entryRuleAttribute returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getAttributeRule()); }
	 iv_ruleAttribute=ruleAttribute 
	 { $current=$iv_ruleAttribute.current; } 
	 EOF 
;

// Rule Attribute
ruleAttribute returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_attribute_0_0=	'attribute:' 
    {
        newLeafNode(lv_attribute_0_0, grammarAccess.getAttributeAccess().getAttributeAttributeKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed($current, "attribute", lv_attribute_0_0, "attribute:");
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='type:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getAttributeAccess().getTypeKeyword_2());
    }
(
(
		lv_type_3_0=RULE_ID
		{
			newLeafNode(lv_type_3_0, grammarAccess.getAttributeAccess().getTypeIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAttributeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	 iv_ruleFunction=ruleFunction 
	 { $current=$iv_ruleFunction.current; } 
	 EOF 
;

// Rule Function
ruleFunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_function_0_0=	'function:' 
    {
        newLeafNode(lv_function_0_0, grammarAccess.getFunctionAccess().getFunctionFunctionKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRule());
	        }
       		setWithLastConsumed($current, "function", lv_function_0_0, "function:");
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getFunctionAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
)	otherlv_2='type:' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getFunctionAccess().getTypeKeyword_2());
    }
(
(
		lv_type_3_0=RULE_ID
		{
			newLeafNode(lv_type_3_0, grammarAccess.getFunctionAccess().getTypeIDTerminalRuleCall_3_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getFunctionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"type",
        		lv_type_3_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleParameter
entryRuleParameter returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getParameterRule()); }
	 iv_ruleParameter=ruleParameter 
	 { $current=$iv_ruleParameter.current; } 
	 EOF 
;

// Rule Parameter
ruleParameter returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_parameter_0_0=	'parameter:' 
    {
        newLeafNode(lv_parameter_0_0, grammarAccess.getParameterAccess().getParameterParameterKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed($current, "parameter", lv_parameter_0_0, "parameter:");
	    }

)
)(
(
		lv_name_1_0=RULE_ID
		{
			newLeafNode(lv_name_1_0, grammarAccess.getParameterAccess().getNameIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getParameterRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_val_0_0=	'value:' 
    {
        newLeafNode(lv_val_0_0, grammarAccess.getValueAccess().getValValueKeyword_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueRule());
	        }
       		setWithLastConsumed($current, "val", lv_val_0_0, "value:");
	    }

)
)(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getValueAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getValueRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
))
;





// Entry rule entryRuleTime
entryRuleTime returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimeRule()); }
	 iv_ruleTime=ruleTime 
	 { $current=$iv_ruleTime.current; } 
	 EOF 
;

// Rule Time
ruleTime returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='time:' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTimeAccess().getTimeKeyword_0());
    }
(
(
		lv_value_1_0=RULE_INT
		{
			newLeafNode(lv_value_1_0, grammarAccess.getTimeAccess().getValueINTTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"INT");
	    }

)
)(
(
(
		lv_timeUnit_2_1=	's' 
    {
        newLeafNode(lv_timeUnit_2_1, grammarAccess.getTimeAccess().getTimeUnitSKeyword_2_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeRule());
	        }
       		setWithLastConsumed($current, "timeUnit", lv_timeUnit_2_1, null);
	    }

    |		lv_timeUnit_2_2=	'm' 
    {
        newLeafNode(lv_timeUnit_2_2, grammarAccess.getTimeAccess().getTimeUnitMKeyword_2_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeRule());
	        }
       		setWithLastConsumed($current, "timeUnit", lv_timeUnit_2_2, null);
	    }

    |		lv_timeUnit_2_3=	'h' 
    {
        newLeafNode(lv_timeUnit_2_3, grammarAccess.getTimeAccess().getTimeUnitHKeyword_2_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimeRule());
	        }
       		setWithLastConsumed($current, "timeUnit", lv_timeUnit_2_3, null);
	    }

)

)
)?)
;





// Entry rule entryRuleTimingConstraint
entryRuleTimingConstraint returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getTimingConstraintRule()); }
	 iv_ruleTimingConstraint=ruleTimingConstraint 
	 { $current=$iv_ruleTimingConstraint.current; } 
	 EOF 
;

// Rule TimingConstraint
ruleTimingConstraint returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
(
		lv_timingConstraint_0_1=	'within' 
    {
        newLeafNode(lv_timingConstraint_0_1, grammarAccess.getTimingConstraintAccess().getTimingConstraintWithinKeyword_0_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimingConstraintRule());
	        }
       		setWithLastConsumed($current, "timingConstraint", lv_timingConstraint_0_1, null);
	    }

    |		lv_timingConstraint_0_2=	'every' 
    {
        newLeafNode(lv_timingConstraint_0_2, grammarAccess.getTimingConstraintAccess().getTimingConstraintEveryKeyword_0_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimingConstraintRule());
	        }
       		setWithLastConsumed($current, "timingConstraint", lv_timingConstraint_0_2, null);
	    }

    |		lv_timingConstraint_0_3=	'for' 
    {
        newLeafNode(lv_timingConstraint_0_3, grammarAccess.getTimingConstraintAccess().getTimingConstraintForKeyword_0_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimingConstraintRule());
	        }
       		setWithLastConsumed($current, "timingConstraint", lv_timingConstraint_0_3, null);
	    }

)

)
)(
(
(
		lv_minmax_1_1=	'less than' 
    {
        newLeafNode(lv_minmax_1_1, grammarAccess.getTimingConstraintAccess().getMinmaxLessThanKeyword_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimingConstraintRule());
	        }
       		setWithLastConsumed($current, "minmax", lv_minmax_1_1, null);
	    }

    |		lv_minmax_1_2=	'at least' 
    {
        newLeafNode(lv_minmax_1_2, grammarAccess.getTimingConstraintAccess().getMinmaxAtLeastKeyword_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimingConstraintRule());
	        }
       		setWithLastConsumed($current, "minmax", lv_minmax_1_2, null);
	    }

)

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getTimingConstraintAccess().getTimeTimeParserRuleCall_2_0()); 
	    }
		lv_time_2_0=ruleTime		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimingConstraintRule());
	        }
       		set(
       			$current, 
       			"time",
        		lv_time_2_0, 
        		"Time");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


