/**
 */
package org.language.reqLanguage.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.language.reqLanguage.util.ReqLanguageAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ReqLanguageItemProviderAdapterFactory extends ReqLanguageAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ReqLanguageItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.Model} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ModelItemProvider modelItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.Model}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createModelAdapter() {
		if (modelItemProvider == null) {
			modelItemProvider = new ModelItemProvider(this);
		}

		return modelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.Requirement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequirementItemProvider requirementItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.Requirement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequirementAdapter() {
		if (requirementItemProvider == null) {
			requirementItemProvider = new RequirementItemProvider(this);
		}

		return requirementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.ReqID} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReqIDItemProvider reqIDItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.ReqID}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReqIDAdapter() {
		if (reqIDItemProvider == null) {
			reqIDItemProvider = new ReqIDItemProvider(this);
		}

		return reqIDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.Prefix} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrefixItemProvider prefixItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.Prefix}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrefixAdapter() {
		if (prefixItemProvider == null) {
			prefixItemProvider = new PrefixItemProvider(this);
		}

		return prefixItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.PrefixState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrefixStateItemProvider prefixStateItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.PrefixState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrefixStateAdapter() {
		if (prefixStateItemProvider == null) {
			prefixStateItemProvider = new PrefixStateItemProvider(this);
		}

		return prefixStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.PrefixCondition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrefixConditionItemProvider prefixConditionItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.PrefixCondition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrefixConditionAdapter() {
		if (prefixConditionItemProvider == null) {
			prefixConditionItemProvider = new PrefixConditionItemProvider(this);
		}

		return prefixConditionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.PrefixEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrefixEventItemProvider prefixEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.PrefixEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrefixEventAdapter() {
		if (prefixEventItemProvider == null) {
			prefixEventItemProvider = new PrefixEventItemProvider(this);
		}

		return prefixEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.PrefixRightOperand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrefixRightOperandItemProvider prefixRightOperandItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.PrefixRightOperand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrefixRightOperandAdapter() {
		if (prefixRightOperandItemProvider == null) {
			prefixRightOperandItemProvider = new PrefixRightOperandItemProvider(this);
		}

		return prefixRightOperandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.ParamEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParamEventItemProvider paramEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.ParamEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParamEventAdapter() {
		if (paramEventItemProvider == null) {
			paramEventItemProvider = new ParamEventItemProvider(this);
		}

		return paramEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.ActorEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActorEventItemProvider actorEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.ActorEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActorEventAdapter() {
		if (actorEventItemProvider == null) {
			actorEventItemProvider = new ActorEventItemProvider(this);
		}

		return actorEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.StateEvent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateEventItemProvider stateEventItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.StateEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateEventAdapter() {
		if (stateEventItemProvider == null) {
			stateEventItemProvider = new StateEventItemProvider(this);
		}

		return stateEventItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.ParameterState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterStateItemProvider parameterStateItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.ParameterState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterStateAdapter() {
		if (parameterStateItemProvider == null) {
			parameterStateItemProvider = new ParameterStateItemProvider(this);
		}

		return parameterStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.MainFunction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MainFunctionItemProvider mainFunctionItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.MainFunction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMainFunctionAdapter() {
		if (mainFunctionItemProvider == null) {
			mainFunctionItemProvider = new MainFunctionItemProvider(this);
		}

		return mainFunctionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.MainComposition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MainCompositionItemProvider mainCompositionItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.MainComposition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMainCompositionAdapter() {
		if (mainCompositionItemProvider == null) {
			mainCompositionItemProvider = new MainCompositionItemProvider(this);
		}

		return mainCompositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.MainStateTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MainStateTransitionItemProvider mainStateTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.MainStateTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMainStateTransitionAdapter() {
		if (mainStateTransitionItemProvider == null) {
			mainStateTransitionItemProvider = new MainStateTransitionItemProvider(this);
		}

		return mainStateTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.MainAttributes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MainAttributesItemProvider mainAttributesItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.MainAttributes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMainAttributesAdapter() {
		if (mainAttributesItemProvider == null) {
			mainAttributesItemProvider = new MainAttributesItemProvider(this);
		}

		return mainAttributesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.OutTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OutTransitionItemProvider outTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.OutTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOutTransitionAdapter() {
		if (outTransitionItemProvider == null) {
			outTransitionItemProvider = new OutTransitionItemProvider(this);
		}

		return outTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.NoTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NoTransitionItemProvider noTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.NoTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNoTransitionAdapter() {
		if (noTransitionItemProvider == null) {
			noTransitionItemProvider = new NoTransitionItemProvider(this);
		}

		return noTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.Operator} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OperatorItemProvider operatorItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.Operator}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOperatorAdapter() {
		if (operatorItemProvider == null) {
			operatorItemProvider = new OperatorItemProvider(this);
		}

		return operatorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.System} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SystemItemProvider systemItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.System}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSystemAdapter() {
		if (systemItemProvider == null) {
			systemItemProvider = new SystemItemProvider(this);
		}

		return systemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.Actor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActorItemProvider actorItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.Actor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActorAdapter() {
		if (actorItemProvider == null) {
			actorItemProvider = new ActorItemProvider(this);
		}

		return actorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.User} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UserItemProvider userItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.User}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUserAdapter() {
		if (userItemProvider == null) {
			userItemProvider = new UserItemProvider(this);
		}

		return userItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.Action} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionItemProvider actionItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.Action}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionAdapter() {
		if (actionItemProvider == null) {
			actionItemProvider = new ActionItemProvider(this);
		}

		return actionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.Value} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueItemProvider valueItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.Value}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueAdapter() {
		if (valueItemProvider == null) {
			valueItemProvider = new ValueItemProvider(this);
		}

		return valueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.Time} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimeItemProvider timeItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.Time}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimeAdapter() {
		if (timeItemProvider == null) {
			timeItemProvider = new TimeItemProvider(this);
		}

		return timeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.language.reqLanguage.TimingConstraint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TimingConstraintItemProvider timingConstraintItemProvider;

	/**
	 * This creates an adapter for a {@link org.language.reqLanguage.TimingConstraint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTimingConstraintAdapter() {
		if (timingConstraintItemProvider == null) {
			timingConstraintItemProvider = new TimingConstraintItemProvider(this);
		}

		return timingConstraintItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (modelItemProvider != null) modelItemProvider.dispose();
		if (requirementItemProvider != null) requirementItemProvider.dispose();
		if (reqIDItemProvider != null) reqIDItemProvider.dispose();
		if (prefixItemProvider != null) prefixItemProvider.dispose();
		if (prefixRightOperandItemProvider != null) prefixRightOperandItemProvider.dispose();
		if (prefixStateItemProvider != null) prefixStateItemProvider.dispose();
		if (prefixConditionItemProvider != null) prefixConditionItemProvider.dispose();
		if (prefixEventItemProvider != null) prefixEventItemProvider.dispose();
		if (paramEventItemProvider != null) paramEventItemProvider.dispose();
		if (actorEventItemProvider != null) actorEventItemProvider.dispose();
		if (stateEventItemProvider != null) stateEventItemProvider.dispose();
		if (parameterStateItemProvider != null) parameterStateItemProvider.dispose();
		if (mainFunctionItemProvider != null) mainFunctionItemProvider.dispose();
		if (mainCompositionItemProvider != null) mainCompositionItemProvider.dispose();
		if (mainStateTransitionItemProvider != null) mainStateTransitionItemProvider.dispose();
		if (mainAttributesItemProvider != null) mainAttributesItemProvider.dispose();
		if (operatorItemProvider != null) operatorItemProvider.dispose();
		if (transitionItemProvider != null) transitionItemProvider.dispose();
		if (outTransitionItemProvider != null) outTransitionItemProvider.dispose();
		if (noTransitionItemProvider != null) noTransitionItemProvider.dispose();
		if (systemItemProvider != null) systemItemProvider.dispose();
		if (actorItemProvider != null) actorItemProvider.dispose();
		if (userItemProvider != null) userItemProvider.dispose();
		if (actionItemProvider != null) actionItemProvider.dispose();
		if (stateItemProvider != null) stateItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (parameterItemProvider != null) parameterItemProvider.dispose();
		if (valueItemProvider != null) valueItemProvider.dispose();
		if (timeItemProvider != null) timeItemProvider.dispose();
		if (timingConstraintItemProvider != null) timingConstraintItemProvider.dispose();
	}

}
